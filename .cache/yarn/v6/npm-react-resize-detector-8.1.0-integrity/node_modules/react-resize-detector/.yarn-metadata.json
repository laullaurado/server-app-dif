{
  "manifest": {
    "name": "react-resize-detector",
    "version": "8.1.0",
    "description": "React resize detector",
    "main": "build/index.js",
    "module": "build/index.esm.js",
    "files": [
      "build"
    ],
    "types": "build/types/index.d.ts",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/maslianok/react-resize-detector.git"
    },
    "scripts": {
      "build": "rollup -c",
      "link": "npm link react react-dom",
      "prettier": "prettier --write .",
      "lint": "eslint .",
      "lint-fix": "eslint --fix",
      "fix": "npm run prettier && npm run lint-fix",
      "prerelease": "npm version prerelease --preid=rc",
      "prepublishOnly": "npm run build"
    },
    "dependencies": {
      "lodash": "^4.17.21"
    },
    "devDependencies": {
      "@rollup/plugin-commonjs": "^24.0.1",
      "@rollup/plugin-node-resolve": "^15.0.2",
      "@rollup/plugin-typescript": "^11.1.0",
      "@types/lodash": "^4.14.192",
      "@types/react": "^18.0.33",
      "@types/react-dom": "^18.0.11",
      "@typescript-eslint/eslint-plugin": "^5.57.1",
      "@typescript-eslint/parser": "^5.57.1",
      "eslint": "^8.37.0",
      "eslint-config-prettier": "^8.8.0",
      "eslint-plugin-import": "^2.27.5",
      "eslint-plugin-react": "^7.32.2",
      "prettier": "^2.8.7",
      "rollup": "^3.20.2",
      "rollup-plugin-node-externals": "^5.1.2",
      "typescript": "^5.0.4"
    },
    "peerDependencies": {
      "react": "^16.0.0 || ^17.0.0 || ^18.0.0",
      "react-dom": "^16.0.0 || ^17.0.0 || ^18.0.0"
    },
    "author": {
      "name": "Vitalii Maslianok",
      "email": "maslianok@gmail.com",
      "url": "https://github.com/maslianok"
    },
    "bugs": {
      "url": "https://github.com/maslianok/react-resize-detector/issues"
    },
    "homepage": "https://github.com/maslianok/react-resize-detector",
    "keywords": [
      "react",
      "resize",
      "detector",
      "resizeObserver",
      "observer"
    ],
    "license": "MIT",
    "sideEffects": false,
    "maintainers": [
      {
        "name": "Vitalii Maslianok",
        "email": "maslianok@gmail.com"
      }
    ],
    "contributors": [
      {
        "name": "James J. Womack",
        "url": "@james_womack"
      },
      {
        "name": "Roman Zhuravlov",
        "url": "@snelsi"
      }
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-react-resize-detector-8.1.0-integrity/node_modules/react-resize-detector/package.json",
    "readmeFilename": "README.md",
    "readme": "# Handle element resizes like it's 2023!\n\n<img src=\"https://img.shields.io/npm/dm/react-resize-detector?style=flat-square\"> <img src=\"https://badgen.net/bundlephobia/minzip/react-resize-detector?style=flat-square\"> <img src=\"https://badgen.net/bundlephobia/tree-shaking/react-resize-detector?style=flat-square\">\n\n#### [Live demo](http://maslianok.github.io/react-resize-detector/)\n\nNowadays browsers support element resize handling natively using [ResizeObservers](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver). The library uses these observers to help you handle element resizes in React.\n\nüê• Tiny <a href=\"https://bundlephobia.com/result?p=react-resize-detector\" target=\"__blank\">~3kb</a>\n\nüêº Written in TypeScript\n\nü¶Å Supports Function and Class Components\n\nüê† Used by <a href=\"https://github.com/maslianok/react-resize-detector/network/dependents\" target=\"__blank\">90k repositories</a>\n\nü¶Ñ Generating <a href=\"https://npmtrends.com/react-resize-detector\" target=\"__blank\">70M+ downloads/year</a>\n\nNo `window.resize` listeners! No timeouts! No üëë viruses! :)\n\n<i>TypeScript-lovers notice: starting from v6.0.0 you may safely remove `@types/react-resize-detector` from you deps list.</i>\n\n## Do you really need this library?\n\nContainer queries now work in [all major browsers](https://caniuse.com/css-container-queries). It's very likely you can resolve your problem using [pure CSS](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries).\n\n<details><summary>Example</summary>\n\n```html\n<div class=\"post\">\n  <div class=\"card\">\n    <h2>Card title</h2>\n    <p>Card content</p>\n  </div>\n</div>\n```\n\n```css\n.post {\n  container-type: inline-size;\n}\n\n/* Default heading styles for the card title */\n.card h2 {\n  font-size: 1em;\n}\n\n/* If the container is larger than 700px */\n@container (min-width: 700px) {\n  .card h2 {\n    font-size: 2em;\n  }\n}\n```\n\n</details>\n\n## Installation\n\n```ssh\nnpm i react-resize-detector\n// OR\nyarn add react-resize-detector\n```\n\nand\n\n```jsx\nimport ResizeObserver from 'react-resize-detector';\n```\n\n## Examples\n\nStarting from v6.0.0 there are 3 recommended ways to work with `resize-detector` library:\n\n#### 1. React hook (new in v6.0.0)\n\n```jsx\nimport { useResizeDetector } from 'react-resize-detector';\n\nconst CustomComponent = () => {\n  const { width, height, ref } = useResizeDetector();\n  return <div ref={ref}>{`${width}x${height}`}</div>;\n};\n```\n\n<details><summary>With props</summary>\n\n```js\nimport { useResizeDetector } from 'react-resize-detector';\n\nconst CustomComponent = () => {\n  const onResize = useCallback(() => {\n    // on resize logic\n  }, []);\n\n  const { width, height, ref } = useResizeDetector({\n    handleHeight: false,\n    refreshMode: 'debounce',\n    refreshRate: 1000,\n    onResize\n  });\n\n  return <div ref={ref}>{`${width}x${height}`}</div>;\n};\n```\n\n</details>\n\n<details><summary>With custom ref</summary>\n\n```js\nimport { useResizeDetector } from 'react-resize-detector';\n\nconst CustomComponent = () => {\n  const targetRef = useRef();\n  const { width, height } = useResizeDetector({ targetRef });\n  return <div ref={targetRef}>{`${width}x${height}`}</div>;\n};\n```\n\n</details>\n\n#### 2. HOC pattern\n\n```jsx\nimport { withResizeDetector } from 'react-resize-detector';\n\nconst CustomComponent = ({ width, height }) => <div>{`${width}x${height}`}</div>;\n\nexport default withResizeDetector(CustomComponent);\n```\n\n#### 3. Child Function Pattern\n\n```jsx\nimport ReactResizeDetector from 'react-resize-detector';\n\n// ...\n\n<ReactResizeDetector handleWidth handleHeight>\n  {({ width, height }) => <div>{`${width}x${height}`}</div>}\n</ReactResizeDetector>;\n```\n\n<details><summary>Full example (Class Component)</summary>\n\n```jsx\nimport React, { Component } from 'react';\nimport { withResizeDetector } from 'react-resize-detector';\n\nconst containerStyles = {\n  height: '100vh',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center'\n};\n\nclass AdaptiveComponent extends Component {\n  state = {\n    color: 'red'\n  };\n\n  componentDidUpdate(prevProps) {\n    const { width } = this.props;\n\n    if (width !== prevProps.width) {\n      this.setState({\n        color: width > 500 ? 'coral' : 'aqua'\n      });\n    }\n  }\n\n  render() {\n    const { width, height } = this.props;\n    const { color } = this.state;\n    return <div style={{ backgroundColor: color, ...containerStyles }}>{`${width}x${height}`}</div>;\n  }\n}\n\nconst AdaptiveWithDetector = withResizeDetector(AdaptiveComponent);\n\nconst App = () => {\n  return (\n    <div>\n      <p>The rectangle changes color based on its width</p>\n      <AdaptiveWithDetector />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n</details>\n\n<details><summary>Full example (Functional Component)</summary>\n\n```jsx\nimport React, { useState, useEffect } from 'react';\nimport { withResizeDetector } from 'react-resize-detector';\n\nconst containerStyles = {\n  height: '100vh',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center'\n};\n\nconst AdaptiveComponent = ({ width, height }) => {\n  const [color, setColor] = useState('red');\n\n  useEffect(() => {\n    setColor(width > 500 ? 'coral' : 'aqua');\n  }, [width]);\n\n  return <div style={{ backgroundColor: color, ...containerStyles }}>{`${width}x${height}`}</div>;\n};\n\nconst AdaptiveWithDetector = withResizeDetector(AdaptiveComponent);\n\nconst App = () => {\n  return (\n    <div>\n      <p>The rectangle changes color based on its width</p>\n      <AdaptiveWithDetector />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n</details>\n\n<br/>\n\nWe still support [other ways](https://github.com/maslianok/react-resize-detector/tree/v4.2.1#examples) to work with this library, but in the future consider using the ones described above. Please let me know if the examples above don't fit your needs.\n\n## Performance optimization\n\nThis library uses the native [ResizeObserver](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) API.\n\nDOM nodes get attached to `ResizeObserver.observe` every time the component mounts and every time any property gets changed.\n\nIt means you should try to avoid passing anonymous functions to `ResizeDetector`, because they will trigger the whole initialization process every time the component rerenders. Use `useCallback` whenever it's possible.\n\n```jsx\n// WRONG - anonymous function\nconst { ref, width, height } = useResizeDetector({\n  onResize: () => {\n    // on resize logic\n  }\n});\n\n// CORRECT - `useCallback` approach\nconst onResize = useCallback(() => {\n  // on resize logic\n}, []);\n\nconst { ref, width, height } = useResizeDetector({ onResize });\n```\n\n## Refs\n\n_The below explanation doesn't apply to `useResizeDetector`_\n\nThe library is trying to be smart and does not add any extra DOM elements to not break your layouts. That's why we use [`findDOMNode`](https://reactjs.org/docs/reactdom.html#finddomnode) method to find and attach listeners to the existing DOM elements. Unfortunately, this method has been deprecated and throws a warning in StrictMode.\n\nFor those who want to avoid this warning, we are introducing an additional property - `targetRef`. You have to set this prop as a `ref` of your target DOM element and the library will use this reference instead of searching the DOM element with help of `findDOMNode`\n\n<details><summary>HOC pattern example</summary>\n\n```jsx\nimport { withResizeDetector } from 'react-resize-detector';\n\nconst CustomComponent = ({ width, height, targetRef }) => <div ref={targetRef}>{`${width}x${height}`}</div>;\n\nexport default withResizeDetector(CustomComponent);\n```\n\n</details>\n\n<details><summary>Child Function Pattern example</summary>\n\n```jsx\nimport ReactResizeDetector from 'react-resize-detector';\n\n// ...\n\n<ReactResizeDetector handleWidth handleHeight>\n  {({ width, height, targetRef }) => <div ref={targetRef}>{`${width}x${height}`}</div>}\n</ReactResizeDetector>;\n```\n\n</details>\n\n## API\n\n| Prop            | Type   | Description                                                                                                                                                                                    | Default     |\n| --------------- | ------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------- |\n| onResize        | Func   | Function that will be invoked with `width` and `height` arguments                                                                                                                              | `undefined` |\n| handleWidth     | Bool   | Trigger `onResize` on width change                                                                                                                                                             | `true`      |\n| handleHeight    | Bool   | Trigger `onResize` on height change                                                                                                                                                            | `true`      |\n| skipOnMount     | Bool   | Do not trigger onResize when a component mounts                                                                                                                                                | `false`     |\n| refreshMode     | String | Possible values: `throttle` and `debounce` See [lodash docs](https://lodash.com/docs#debounce) for more information. `undefined` - callback will be fired for every frame                      | `undefined` |\n| refreshRate     | Number | Use this in conjunction with `refreshMode`. Important! It's a numeric prop so set it accordingly, e.g. `refreshRate={500}`                                                                     | `1000`      |\n| refreshOptions  | Object | Use this in conjunction with `refreshMode`. An object in shape of `{ leading: bool, trailing: bool }`. Please refer to [lodash's docs](https://lodash.com/docs/4.17.11#throttle) for more info | `undefined` |\n| observerOptions | Object | These options will be used as a second parameter of [`resizeObserver.observe`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/observe) method.                                | `undefined` |\n| targetRef       | Ref    | Use this prop to pass a reference to the element you want to attach resize handlers to. It must be an instance of `React.useRef` or `React.createRef` functions                                | `undefined` |\n\n## Testing with Enzyme and Jest\n\nThanks to [@Primajin](https://github.com/Primajin) for posting this [snippet](https://github.com/maslianok/react-resize-detector/issues/145)\n\n```jsx\nconst { ResizeObserver } = window;\n\nbeforeEach(() => {\n  delete window.ResizeObserver;\n  window.ResizeObserver = jest.fn().mockImplementation(() => ({\n    observe: jest.fn(),\n    unobserve: jest.fn(),\n    disconnect: jest.fn()\n  }));\n\n  wrapper = mount(<MyComponent />);\n});\n\nafterEach(() => {\n  window.ResizeObserver = ResizeObserver;\n  jest.restoreAllMocks();\n});\n\nit('should do my test', () => {\n  // [...]\n});\n```\n\n## License\n\nMIT\n\n## ‚ù§Ô∏è\n\nShow us some love and STAR ‚≠ê the project if you find it useful\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2023 Vitalii Maslianok\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/react-resize-detector/-/react-resize-detector-8.1.0.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/react-resize-detector/-/react-resize-detector-8.1.0.tgz",
    "hash": "",
    "integrity": "sha512-S7szxlaIuiy5UqLhLL1KY3aoyGHbZzsTpYal9eYMwCyKqoqoVLCmIgAgNyIM1FhnP2KyBygASJxdhejrzjMb+w==",
    "registry": "npm",
    "packageName": "react-resize-detector",
    "cacheIntegrity": "sha512-S7szxlaIuiy5UqLhLL1KY3aoyGHbZzsTpYal9eYMwCyKqoqoVLCmIgAgNyIM1FhnP2KyBygASJxdhejrzjMb+w== sha1-HHgX24vIhuLb0/vjsm6o5WvgUko="
  },
  "registry": "npm",
  "hash": "4bbb33c65688ba2cb952a2e12cbd4a6376a8c861db673b13a586a5f5e60cc02c8aaa8aa854b0a622002037220cd458673f62b2072800489c5d85e8ebce331bfb"
}