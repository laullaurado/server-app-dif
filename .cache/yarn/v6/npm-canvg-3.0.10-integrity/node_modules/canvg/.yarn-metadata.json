{
  "manifest": {
    "name": "canvg",
    "version": "3.0.10",
    "description": "JavaScript SVG parser and renderer on Canvas.",
    "authors": [
      {
        "name": "Gabe Lerner",
        "email": "gabelerner@gmail.com"
      },
      {
        "name": "Brett Zamir"
      },
      {
        "name": "Dan Green",
        "url": "https://twitter.com/dangreen58"
      }
    ],
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/canvg/canvg"
    },
    "bugs": {
      "url": "https://github.com/canvg/canvg/issues"
    },
    "type": "module",
    "sideEffects": false,
    "main": "lib/index.cjs",
    "module": "lib/index.es.js",
    "raw": "lib/index.babel.js",
    "umd": "lib/umd.js",
    "types": "lib/index.d.ts",
    "exports": {
      "require": "./lib/index.cjs",
      "import": "./lib/index.es.js"
    },
    "engines": {
      "node": ">=10.0.0"
    },
    "keywords": [
      "javascript",
      "client",
      "browser",
      "svg",
      "canvas"
    ],
    "dependencies": {
      "@babel/runtime": "^7.12.5",
      "@types/raf": "^3.4.0",
      "core-js": "^3.8.3",
      "raf": "^3.4.1",
      "regenerator-runtime": "^0.13.7",
      "rgbcolor": "^1.0.1",
      "stackblur-canvas": "^2.0.0",
      "svg-pathdata": "^6.0.3"
    },
    "files": [
      "lib"
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-canvg-3.0.10-integrity/node_modules/canvg/package.json",
    "readmeFilename": "README.md",
    "readme": "# canvg\n\n[![NPM version][npm]][npm-url]\n[![Dependencies status][deps]][deps-url]\n[![Build status][build]][build-url]\n[![Coverage status][coverage]][coverage-url]\n[![Dependabot badge][dependabot]][dependabot-url]\n[![Documentation badge][documentation]][documentation-url]\n\n[npm]: https://img.shields.io/npm/v/canvg.svg\n[npm-url]: https://npmjs.com/package/canvg\n\n[deps]: https://david-dm.org/canvg/canvg.svg\n[deps-url]: https://david-dm.org/canvg/canvg\n\n[build]: https://img.shields.io/github/workflow/status/canvg/canvg/CI.svg\n[build-url]: https://github.com/canvg/canvg/actions\n\n[coverage]: https://img.shields.io/coveralls/canvg/canvg.svg\n[coverage-url]: https://coveralls.io/r/canvg/canvg\n\n[dependabot]: https://api.dependabot.com/badges/status?host=github&repo=canvg/canvg\n[dependabot-url]: https://dependabot.com/\n\n[documentation]: https://img.shields.io/badge/API-Documentation-2b7489.svg\n[documentation-url]: https://canvg.github.io/canvg\n\nJavaScript SVG parser and renderer on Canvas. It takes the URL to the SVG file or the text of the SVG file, parses it in JavaScript and renders the result on Canvas.\n\n[Demo](https://canvg.github.io/canvg/demo/index.html)\n\n[Playground](https://jsfiddle.net/0q1vrjxk/)\n\n## Install\n\n```sh\nnpm i canvg\n# or\nyarn add canvg\n```\n\n## Usage\n\nBasic module exports:\n\n```js\nexport default Canvg;\nexport {\n    presets\n};\n```\n\n[Description of all exports you can find in Documentation.](https://canvg.github.io/canvg/index.html)\n\n### Example\n\n```js\nimport Canvg from 'canvg';\n\nlet v = null;\n\nwindow.onload = async () => {\n    const canvas = document.querySelector('canvas');\n    const ctx = canvas.getContext('2d');\n    \n    v = await Canvg.from(ctx, './svgs/1.svg');\n\n    // Start SVG rendering with animations and mouse handling.\n    v.start();\n};\n\nwindow.onbeforeunload = () => {\n    v.stop();\n};\n```\n\n<details>\n    <summary>\n        <b>OffscreenCanvas</b>\n    </summary>\n\n```js\nimport Canvg, {\n    presets\n} from 'canvg';\n\nself.onmessage = async (event) => {\n    const {\n        width,\n        height,\n        svg\n    } = event.data;\n    const canvas = new OffscreenCanvas(width, height);\n    const ctx = canvas.getContext('2d');\n    const v = await Canvg.from(ctx, svg, presets.offscreen());\n\n    // Render only first frame, ignoring animations and mouse.\n    await v.render();\n\n    const blob = await canvas.convertToBlob();\n    const pngUrl = URL.createObjectURL(blob);\n\n    self.postMessage({\n        pngUrl\n    });\n};\n```\n\n[`OffscreenCanvas` browsers compatibility.](https://caniuse.com/offscreencanvas)\n\n</details>\n\n<details>\n    <summary>\n        <b>NodeJS</b>\n    </summary>\n\n```js\nimport {\n    promises as fs\n} from 'fs';\nimport {\n    DOMParser\n} from 'xmldom';\nimport * as canvas from 'canvas';\nimport fetch from 'node-fetch';\nimport Canvg, {\n    presets\n} from 'canvg';\n\nconst preset = presets.node({\n    DOMParser,\n    canvas,\n    fetch\n});\n\n(async (output, input) => {\n    const svg = await fs.readFile(input, 'utf8');\n    const canvas = preset.createCanvas(800, 600);\n    const ctx = canvas.getContext('2d');\n    const v = Canvg.fromString(ctx, svg, preset);\n\n    // Render only first frame, ignoring animations.\n    await v.render();\n\n    const png = canvas.toBuffer();\n\n    await fs.writeFile(output, png);\n\n})(\n    process.argv.pop(),\n    process.argv.pop()\n);\n```\n\n</details>\n\n<details>\n    <summary>\n        <b>Resize</b>\n    </summary>\n\n```js\nimport Canvg, {\n    presets\n} from 'canvg';\n\nself.onmessage = async (event) => {\n    const {\n        width,\n        height,\n        svg\n    } = event.data;\n    const canvas = new OffscreenCanvas(width, height);\n    const ctx = canvas.getContext('2d');\n    const v = await Canvg.from(ctx, svg, presets.offscreen());\n\n    /**\n     * Resize SVG to fit in given size.\n     * @param width\n     * @param height\n     * @param preserveAspectRatio\n     */\n    v.resize(width, height, 'xMidYMid meet');\n\n    // Render only first frame, ignoring animations and mouse.\n    await v.render();\n\n    const blob = await canvas.convertToBlob();\n    const pngUrl = URL.createObjectURL(blob);\n\n    self.postMessage({\n        pngUrl\n    });\n};\n```\n\n</details>\n\n<details>\n    <summary>\n        <b>Browser</b>\n    </summary>\n\n```html\n<script type=\"text/javascript\" src=\"https://unpkg.com/canvg@3.0.4/lib/umd.js\"></script>\n<script type=\"text/javascript\">\nwindow.onload = () => {\n    const canvas = document.querySelector('canvas');\n    const ctx = canvas.getContext('2d');\n    \n    v = canvg.Canvg.fromString(ctx, '<svg width=\"600\" height=\"600\"><text x=\"50\" y=\"50\">Hello World!</text></svg>');\n\n    // Start SVG rendering with animations and mouse handling.\n    v.start();\n\n};\n</script>\n<canvas />\n```\n\n</details>\n\n### Options\n\nThe third parameter of `new Canvg(...)`, `Canvg.from(...)` and `Canvg.fromString(...)` is options:\n\n```ts\ninterface IOptions {\n    /**\n     * WHATWG-compatible `fetch` function.\n     */\n    fetch?: typeof fetch;\n    /**\n     * XML/HTML parser from string into DOM Document.\n     */\n    DOMParser?: typeof DOMParser;\n    /**\n     * Window object.\n     */\n    window?: Window;\n    /**\n     * Whether enable the redraw.\n     */\n    enableRedraw?: boolean;\n    /**\n     * Ignore mouse events.\n     */\n    ignoreMouse?: boolean;\n    /**\n     * Ignore animations.\n     */\n    ignoreAnimation?: boolean;\n    /**\n     * Does not try to resize canvas.\n     */\n    ignoreDimensions?: boolean;\n    /**\n     * Does not clear canvas.\n     */\n    ignoreClear?: boolean;\n    /**\n     * Scales horizontally to width.\n     */\n    scaleWidth?: number;\n    /**\n     * Scales vertically to height.\n     */\n    scaleHeight?: number;\n    /**\n     * Draws at a x offset.\n     */\n    offsetX?: number;\n    /**\n     * Draws at a y offset.\n     */\n    offsetY?: number;\n    /**\n     * Will call the function on every frame, if it returns true, will redraw.\n     */\n    forceRedraw?(): boolean;\n    /**\n     * Default `rem` size.\n     */\n    rootEmSize?: number;\n    /**\n     * Default `em` size.\n     */\n    emSize?: number;\n    /**\n     * Function to create new canvas.\n     */\n    createCanvas?: (width: number, height: number) => HTMLCanvasElement | OffscreenCanvas;\n    /**\n     * Function to create new image.\n     */\n    createImage?: (src: string, anonymousCrossOrigin?: boolean) => Promise<CanvasImageSource>;\n    /**\n     * Load images anonymously.\n     */\n    anonymousCrossOrigin?: boolean;\n}\n```\n\n#### Options presets\n\nThere are two options presets:\n\n- `presets.offscreen()`: options for [`OffscreenCanvas`](https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas);\n- `presets.node({ DOMParser, canvas, fetch })`: options for NodeJS with [`node-canvas`](https://github.com/Automattic/node-canvas).\n\n## What's implemented?\n\nThe end goal is everything from the [SVG spec](http://www.w3.org/TR/SVG/). The majority of the rendering and animation is working. If you would like to see a feature implemented, don't hesitate to add it to the issues list, or better is to create pull request ðŸ˜Ž\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2010 - present Gabe Lerner (gabelerner@gmail.com) - https://github.com/canvg/canvg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/canvg/-/canvg-3.0.10.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/canvg/-/canvg-3.0.10.tgz",
    "hash": "",
    "integrity": "sha512-qwR2FRNO9NlzTeKIPIKpnTY6fqwuYSequ8Ru8c0YkYU7U0oW+hLUvWadLvAu1Rl72OMNiFhoLu4f8eUjQ7l/+Q==",
    "registry": "npm",
    "packageName": "canvg",
    "cacheIntegrity": "sha512-qwR2FRNO9NlzTeKIPIKpnTY6fqwuYSequ8Ru8c0YkYU7U0oW+hLUvWadLvAu1Rl72OMNiFhoLu4f8eUjQ7l/+Q== sha1-jlKi0Ii2/6I6x4lwsqnuv64O9LM="
  },
  "registry": "npm",
  "hash": "ab047615134ef4d9734de2883c82a99d363a7eac2e6127aabbc46ef1cd1891853b534a16fa12d4bd669d2ef02ed5197bd8e30d8858682eee1ff1e52343b97ff9"
}