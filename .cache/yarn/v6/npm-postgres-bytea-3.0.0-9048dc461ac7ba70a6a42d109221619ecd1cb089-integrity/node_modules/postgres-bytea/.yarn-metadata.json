{
  "manifest": {
    "name": "postgres-bytea",
    "main": "index.js",
    "version": "3.0.0",
    "description": "Postgres bytea parser",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/bendrucker/postgres-bytea.git"
    },
    "author": {
      "name": "Ben Drucker",
      "email": "bvdrucker@gmail.com",
      "url": "bendrucker.me"
    },
    "engines": {
      "node": ">= 6"
    },
    "scripts": {
      "test": "standard && tape *.js"
    },
    "keywords": [
      "bytea",
      "postgres",
      "binary",
      "parser"
    ],
    "dependencies": {
      "obuf": "~1.1.2"
    },
    "devDependencies": {
      "concat-stream": "2.0.0",
      "standard": "^14.0.0",
      "stream-to-promise": "^3.0.0",
      "tape": "^5.0.0",
      "tape-promise": "4.0.0"
    },
    "files": [
      "*.js"
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-postgres-bytea-3.0.0-9048dc461ac7ba70a6a42d109221619ecd1cb089-integrity/node_modules/postgres-bytea/package.json",
    "readmeFilename": "readme.md",
    "readme": "# postgres-bytea [![Build Status](https://travis-ci.org/bendrucker/postgres-bytea.svg?branch=master)](https://travis-ci.org/bendrucker/postgres-bytea) [![Greenkeeper badge](https://badges.greenkeeper.io/bendrucker/postgres-bytea.svg)](https://greenkeeper.io/)\n\n> Decode/encode Postgres bytea strings to Buffers\n\n\n## Install\n\n```sh\nnpm install postgres-bytea\n```\n\n## Usage\n\n### Decoding\n\nTo decode a bytea string into a buffer:\n\n```js\nconst bytea = require('postgres-bytea')\n\n// bytea hex format\nbytea.decode('\\\\x1234') // <Buffer 12 34>\n\n// bytea escape format\nbytea.decode('\\\\000\\\\100\\\\200') // <Buffer 00 40 80>\n```\n\nThe `decode` function supports both the hex format used in Postgres 9+ and the escape format used in Postgres 8 and earlier. It automatically detects the format from the incoming data.\n\nFor backward compatibility, `decode` is also the default export from the package.\n\n### Decoding (Stream)\n\nTo decode a bytea hex stream into binary:\n\n```js\nconst bytea = require('postgres-bytea')\n\nreadable.pipe(new bytea.Decoder())\n```\n\n`Decoder` expects a double-escaped `\\\\x` prefix to allow reading from a `COPY TO` statement.\n\n### Encoding (Stream)\n\n\n```js\nconst bytea = require('postgres-bytea')\n\nreadable.pipe(new bytea.Encoder())\n```\n\n`Encoder` adds a double-escaped `\\\\x` prefix to allow writing to a `COPY FROM` statement.\n\n## API\n\n#### `bytea.decode(input)` -> `buffer`\n\n##### input\n\n*Required*  \nType: `string`\n\nA Postgres bytea binary string.\n\n#### `new bytea.Decoder()` -> `stream.Transform`\n\nCreates a bytea decoder stream that emits buffer chunks.\n\n#### `new bytea.Encoder()` -> `stream.Transform`\n\nCreates a bytea encoder stream that receives buffer chunks and emits them as bytea strings.\n\n## Prefix Escaping\n\n> The “hex” format encodes binary data as 2 hexadecimal digits per byte, most significant nibble first. The entire string is preceded by the sequence \\x (to distinguish it from the escape format). In some contexts, the initial backslash may need to be escaped by doubling it (see Section 4.1.2.1).\n>\n> https://www.postgresql.org/docs/12/datatype-binary.html#id-1.5.7.12.9\n\nA `SELECT` statement returns bytea values using the single-escaped `\\x` prefix. The `COPY TO` and `COPY FROM` commands expect and return bytea values with the double-escaped `\\\\x` prefix. \n\n`bytea.decode` expects the single-escaped prefix. The `Decoder` and `Encoder` streams expect the double-escaped prefix, since they are most useful in `COPY FROM` and `COPY TO` statements.\n\n## License\n\nMIT © [Ben Drucker](http://bendrucker.me)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Ben Drucker <bvdrucker@gmail.com> (bendrucker.me)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/postgres-bytea/-/postgres-bytea-3.0.0.tgz#9048dc461ac7ba70a6a42d109221619ecd1cb089",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/postgres-bytea/-/postgres-bytea-3.0.0.tgz",
    "hash": "9048dc461ac7ba70a6a42d109221619ecd1cb089",
    "integrity": "sha512-CNd4jim9RFPkObHSjVHlVrxoVQXz7quwNFpz7RY1okNNme49+sVyiTvTRobiLV548Hx/hb1BG+iE7h9493WzFw==",
    "registry": "npm",
    "packageName": "postgres-bytea",
    "cacheIntegrity": "sha512-CNd4jim9RFPkObHSjVHlVrxoVQXz7quwNFpz7RY1okNNme49+sVyiTvTRobiLV548Hx/hb1BG+iE7h9493WzFw== sha1-kEjcRhrHunCmpC0QkiFhns0csIk="
  },
  "registry": "npm",
  "hash": "9048dc461ac7ba70a6a42d109221619ecd1cb089"
}