{
  "manifest": {
    "name": "assert-options",
    "version": "0.8.1",
    "description": "Generic options parameter handling.",
    "main": "dist/src/index.js",
    "types": "dist/src/index.d.ts",
    "scripts": {
      "all": "tsc && npm test && npm run lint",
      "lint": "tslint --fix ./src/**/*.ts ./test/**/*.ts",
      "test": "nyc mocha -r ts-node/register test/**/*.spec.ts"
    },
    "files": [
      "dist/src",
      "dist/index.js"
    ],
    "homepage": "https://github.com/vitaly-t/assert-options",
    "repository": {
      "type": "git",
      "url": "https://github.com/vitaly-t/assert-options.git"
    },
    "bugs": {
      "url": "https://github.com/vitaly-t/assert-options/issues",
      "email": "vitaly.tomilov@gmail.com"
    },
    "keywords": [
      "assert",
      "options"
    ],
    "author": {
      "name": "Vitaly Tomilov",
      "email": "vitaly.tomilov@gmail.com"
    },
    "license": "MIT",
    "engines": {
      "node": ">=10.0.0"
    },
    "devDependencies": {
      "@types/chai": "4.3.4",
      "@types/mocha": "10.0.1",
      "@types/node": "18.15.3",
      "chai": "4.3.7",
      "mocha": "10.2.0",
      "mocha-lcov-reporter": "1.3.0",
      "nyc": "15.1.0",
      "ts-node": "10.9.1",
      "tslint": "6.1.3",
      "typescript": "5.0.2"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-assert-options-0.8.1-integrity/node_modules/assert-options/package.json",
    "readmeFilename": "README.md",
    "readme": "# assert-options\n\nSmart `options`-object handling, with one line of code:\n\n* throw detailed error on invalid options\n* set default values for missing options  \n\nStrongly-typed, built with TypeScript 4.x `strict` mode, for JavaScript clients.\n\n## Rationale\n\n* Passing in invalid or misspelled option names is one of the most common errors in JavaScript.\n* Assigning defaults is the most common operation for methods that take options.  \n\nThis module automates proper options handling - parsing + setting defaults in one line.\n\nAlthough this library is implemented in TypeScript, its objective is mainly to help JavaScript clients,\nbecause TypeScript itself can handle invalid options and defaults natively. \n\n## Installation\n\n```\n$ npm i assert-options\n```\n\n## Usage\n\n```js\nconst { assertOptions } = require('assert-options');\n\nfunction functionWithOptions(options) {\n    options = assertOptions(options, {first: 123, second: null});\n    \n    // options is a safe object here, with all missing defaults set.\n}\n```\n\nWhen default values are not needed, you can just use an array of strings:\n\n```js\nfunction functionWithOptions(options) {\n    options = assertOptions(options, ['first', 'second']);\n    \n    // the result is exactly the same as using the following:\n    // options = assertOptions(options, {first: undefined, second: undefined});\n    \n    // options is a safe object here, without defaults.\n}\n```\n\nYou can override how errors are thrown, by creating the `assert` function yourself,\nand specifying a custom handler:\n\n```js\nconst {createAssert} = require('assert-options');\n\n// must implement IOptionsErrorHandler protocol\nclass MyErrorHanler {\n    handle(err, ctx) {\n        // throw different errors, based on \"err\"\n        // for reference, see DefaultErrorHandler implementation \n    }\n}\n\nconst assert = createAssert(new MyErrorHanler());\n```\n\n## API\n\n### `assertOptions(options, defaults)` \n\n* When `options` is `null`/`undefined`, new `{}` is returned, applying `defaults` as specified.\n\n* When `options` contains an unknown property, [Error] `Option \"name\" is not recognized.` is thrown.\n\n* When a property in `options` is missing or `undefined`, its value is set from the `defaults`,\nprovided it is available and its value is not `undefined`.\n\n* When `options` is not `null`/`undefined`, it must be of type `object`, or else [TypeError] is thrown:\n`Invalid \"options\" parameter: value`.\n  \n* Parameter `defaults` is required, as a non-`null` object or an array of strings, or else [TypeError]\nis thrown: `Invalid \"defaults\" parameter: value`.\n\n### `createAssert(handler)`\n\nCreates a new assert function, using a custom error handler that implements `IOptionsErrorHandler` protocol.\n\nFor example, the default `assertOptions` is created internally like this:\n\n```js\nconst {createOptions, DefaultErrorHandler} = require('assert-options');\n\nconst assertOptions = createAssert(new DefaultErrorHandler());\n``` \n\n[Error]:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n[TypeError]:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/assert-options/-/assert-options-0.8.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/assert-options/-/assert-options-0.8.1.tgz",
    "hash": "",
    "integrity": "sha512-5lNGRB5g5i2bGIzb+J1QQE1iKU/WEMVBReFIc5pPDWjcPj23otPL0eI6PB2v7QPi0qU6Mhym5D3y0ZiSIOf3GA==",
    "registry": "npm",
    "packageName": "assert-options",
    "cacheIntegrity": "sha512-5lNGRB5g5i2bGIzb+J1QQE1iKU/WEMVBReFIc5pPDWjcPj23otPL0eI6PB2v7QPi0qU6Mhym5D3y0ZiSIOf3GA== sha1-8d98730LiymjwJHmlGKHpKmkWrg="
  },
  "registry": "npm",
  "hash": "e65346441e60e62d9b188cdbf89d50404d62294fd610c54145e148739a4f0d68dc3e3db7a2d3cbd1e23a3c1dafed03e2d2a53a321ca6e43df2d1989220e7f718"
}