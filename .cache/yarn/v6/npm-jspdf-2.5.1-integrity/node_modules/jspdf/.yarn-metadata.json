{
  "manifest": {
    "name": "jspdf",
    "version": "2.5.1",
    "homepage": "https://github.com/mrrio/jspdf",
    "description": "PDF Document creation from JavaScript",
    "main": "dist/jspdf.node.min.js",
    "module": "dist/jspdf.es.min.js",
    "browser": "dist/jspdf.es.min.js",
    "files": [
      "dist",
      "types/index.d.ts",
      "README.md",
      "LICENSE"
    ],
    "typings": "types/index.d.ts",
    "types": "types/index.d.ts",
    "keywords": [
      "pdf"
    ],
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/MrRio/jsPDF.git"
    },
    "dependencies": {
      "@babel/runtime": "^7.14.0",
      "atob": "^2.1.2",
      "btoa": "^1.2.1",
      "fflate": "^0.4.8"
    },
    "optionalDependencies": {
      "canvg": "^3.0.6",
      "core-js": "^3.6.0",
      "dompurify": "^2.2.0",
      "html2canvas": "^1.0.0-rc.5"
    },
    "devDependencies": {
      "@babel/core": "^7.10.4",
      "@babel/plugin-transform-runtime": "^7.14.5",
      "@babel/preset-env": "^7.10.4",
      "@rollup/plugin-babel": "^5.3.0",
      "@rollup/plugin-replace": "^2.3.3",
      "@rollup/plugin-typescript": "^8.0.0",
      "@types/jasmine": "^3.5.11",
      "@types/node": "^14.0.18",
      "@typescript-eslint/eslint-plugin": "^3.6.0",
      "@typescript-eslint/parser": "^3.6.0",
      "chalk": "^4.1.0",
      "codeclimate-test-reporter": "^0.5.1",
      "diff": "^4.0.2",
      "docdash": "^1.2.0",
      "eslint": "^7.4.0",
      "eslint-plugin-jasmine": "^4.1.1",
      "folder-delete": "^1.0.4",
      "inquirer": "^6.5.2",
      "jasmine": "3.5.0",
      "jasmine-core": "3.5.0",
      "jasmine-expect": "4.0.3",
      "js-yaml": "3.13.1",
      "jsdoc": "^3.6.3",
      "karma": "5.1.0",
      "karma-babel-preprocessor": "8.0.1",
      "karma-chrome-launcher": "3.1.0",
      "karma-coverage": "2.0.2",
      "karma-firefox-launcher": "1.3.0",
      "karma-ie-launcher": "1.0.0",
      "karma-jasmine": "3.3.1",
      "karma-jasmine-matchers": "4.0.2",
      "karma-mocha-reporter": "2.2.5",
      "karma-rollup-preprocessor": "^7.0.7",
      "karma-sauce-launcher": "4.1.5",
      "karma-typescript": "^5.0.3",
      "karma-verbose-reporter": "0.0.6",
      "local-web-server": "^4.2.1",
      "log-utils": "^1.0.0",
      "markdown": "0.5.0",
      "preprocess": "^3.2.0",
      "prettier": "^1.19.1",
      "regenerator-runtime": "^0.13.5",
      "requirejs": "^2.3.6",
      "rollup": "^2.18.2",
      "rollup-plugin-commonjs": "^10.1.0",
      "rollup-plugin-license": "^2.1.0",
      "rollup-plugin-node-resolve": "5.2.0",
      "rollup-plugin-preprocess": "0.0.4",
      "rollup-plugin-terser": "^6.1.0",
      "typescript": "^3.9.6",
      "yarpm": "^0.2.1"
    },
    "scripts": {
      "start": "ws",
      "build": "rollup --config rollup.config.js",
      "version": "yarpm run build && yarpm run generate-docs && git add -A dist docs",
      "pretest": "yarpm run build",
      "test": "yarpm run test-node && yarpm run test-saucelabs",
      "test-saucelabs": "karma start test/saucelabs/karma.conf.js --single-run --verbose && for a in coverage/*; do codeclimate-test-reporter < \\\"$a/lcov.info\\\"; break; done",
      "test-local": "yarpm run test-unit && yarpm run test-node && yarpm run test-amd && yarpm run test-esm && yarpm run test-globals && yarpm run test-typescript && yarpm run test-webworker",
      "test-unit": "karma start test/unit/karma.conf.js --single-run",
      "test-amd": "karma start test/deployment/amd/karma.conf.js --single-run",
      "test-esm": "karma start test/deployment/esm/karma.conf.js --single-run",
      "test-globals": "karma start test/deployment/globals/karma.conf.js --single-run",
      "test-typescript": "karma start test/deployment/typescript/karma.conf.js --single-run",
      "test-webworker": "karma start test/deployment/webworker/karma.conf.js --single-run",
      "test-node": "jasmine --config=test/deployment/node/jasmine.json",
      "test-training": "node test/utils/reference-server.js",
      "test-typings": "tsc -p types/tsconfig.json && tsc -p types/tsconfig-node.json",
      "prettier": "prettier --write \"*.{js,ts,md,css,json}\" \"{spec,examples,src,types}/**/*.{js,ts,md,css,json}\"",
      "lint": "prettier --check \"*.{js,ts,md,css,json}\" \"{spec,examples,src,types}/**/*.{js,ts,md,css,json}\"",
      "pregenerate-docs": "node deletedocs.js",
      "generate-docs": "jsdoc -c jsdoc.json --readme README.md"
    },
    "browserslist": [
      "last 2 versions",
      "IE 11"
    ],
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-jspdf-2.5.1-integrity/node_modules/jspdf/package.json",
    "readmeFilename": "README.md",
    "readme": "# ![jsPDF](https://parall.ax/parallax-2016/img/svg/jspdf-logo.svg)\n\n[![Continous Integration](https://github.com/MrRio/jsPDF/actions/workflows/continuous-integration.yml/badge.svg)](https://github.com/MrRio/jsPDF/actions/workflows/continuous-integration.yml?query=branch%3Amaster)\n[![Code Climate](https://codeclimate.com/repos/57f943855cdc43705e00592f/badges/2665cddeba042dc5191f/gpa.svg)](https://codeclimate.com/repos/57f943855cdc43705e00592f/feed)\n[![Test Coverage](https://codeclimate.com/repos/57f943855cdc43705e00592f/badges/2665cddeba042dc5191f/coverage.svg)](https://codeclimate.com/repos/57f943855cdc43705e00592f/coverage)\n[![GitHub license](https://img.shields.io/github/license/MrRio/jsPDF.svg)](https://github.com/MrRio/jsPDF/blob/master/LICENSE)\n[![Total alerts](https://img.shields.io/lgtm/alerts/g/MrRio/jsPDF.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/MrRio/jsPDF/alerts/)\n[![Language grade: JavaScript](https://img.shields.io/lgtm/grade/javascript/g/MrRio/jsPDF.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/MrRio/jsPDF/context:javascript)\n[![Gitpod ready-to-code](https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod)](https://gitpod.io/from-referrer/)\n\n**A library to generate PDFs in JavaScript.**\n\nYou can [catch me on twitter](http://twitter.com/MrRio): [@MrRio](http://twitter.com/MrRio) or head over to [my company's website](http://parall.ax) for consultancy.\n\njsPDF is now co-maintained by [yWorks - the diagramming experts](https://www.yworks.com/).\n\n## [Live Demo](http://raw.githack.com/MrRio/jsPDF/master/) | [Documentation](http://raw.githack.com/MrRio/jsPDF/master/docs/)\n\n## Install\n\nRecommended: get jsPDF from npm:\n\n```sh\nnpm install jspdf --save\n# or\nyarn add jspdf\n```\n\nAlternatively, load it from a CDN:\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js\"></script>\n```\n\nOr always get latest version via [unpkg](https://unpkg.com/browse/jspdf/)\n\n```html\n<script src=\"https://unpkg.com/jspdf@latest/dist/jspdf.umd.min.js\"></script>\n```\n\nThe `dist` folder of this package contains different kinds of files:\n\n- **jspdf.es.\\*.js**: Modern ES2015 module format.\n- **jspdf.node.\\*.js**: For running in Node. Uses file operations for loading/saving files instead of browser APIs.\n- **jspdf.umd.\\*.js**: UMD module format. For AMD or script-tag loading.\n- **polyfills\\*.js**: Required polyfills for older browsers like Internet Explorer. The es variant simply imports all\n  required polyfills from `core-js`, the umd variant is self-contained.\n\nUsually it is not necessary to specify the exact file in the import statement. Build tools or Node automatically figure\nout the right file, so importing \"jspdf\" is enough.\n\n## Usage\n\nThen you're ready to start making your document:\n\n```javascript\nimport { jsPDF } from \"jspdf\";\n\n// Default export is a4 paper, portrait, using millimeters for units\nconst doc = new jsPDF();\n\ndoc.text(\"Hello world!\", 10, 10);\ndoc.save(\"a4.pdf\");\n```\n\nIf you want to change the paper size, orientation, or units, you can do:\n\n```javascript\n// Landscape export, 2Ã—4 inches\nconst doc = new jsPDF({\n  orientation: \"landscape\",\n  unit: \"in\",\n  format: [4, 2]\n});\n\ndoc.text(\"Hello world!\", 1, 1);\ndoc.save(\"two-by-four.pdf\");\n```\n\n### Running in Node.js\n\n```javascript\nconst { jsPDF } = require(\"jspdf\"); // will automatically load the node version\n\nconst doc = new jsPDF();\ndoc.text(\"Hello world!\", 10, 10);\ndoc.save(\"a4.pdf\"); // will save the file in the current working directory\n```\n\n### Other Module Formats\n\n<details>\n  <summary>\n    <b>AMD</b>\n  </summary>\n\n```js\nrequire([\"jspdf\"], ({ jsPDF }) => {\n  const doc = new jsPDF();\n  doc.text(\"Hello world!\", 10, 10);\n  doc.save(\"a4.pdf\");\n});\n```\n\n</details>\n\n<details>\n  <summary>\n    <b>Globals</b>\n  </summary>\n\n```js\nconst { jsPDF } = window.jspdf;\n\nconst doc = new jsPDF();\ndoc.text(\"Hello world!\", 10, 10);\ndoc.save(\"a4.pdf\");\n```\n\n</details>\n\n### Optional dependencies\n\nSome functions of jsPDF require optional dependencies. E.g. the `html` method, which depends on `html2canvas` and,\nwhen supplied with a string HTML document, `dompurify`. JsPDF loads them dynamically when required\n(using the respective module format, e.g. dynamic imports). Build tools like Webpack will automatically create separate\nchunks for each of the optional dependencies. If your application does not use any of the optional dependencies, you\ncan prevent Webpack from generating the chunks by defining them as external dependencies:\n\n```js\n// webpack.config.js\nmodule.exports = {\n  // ...\n  externals: {\n    // only define the dependencies you are NOT using as externals!\n    canvg: \"canvg\",\n    html2canvas: \"html2canvas\",\n    dompurify: \"dompurify\"\n  }\n};\n```\n\nIn **Vue CLI** projects, externals can be defined via the [configureWebpack](https://cli.vuejs.org/config/#configurewebpack)\nor [chainWebpack](https://cli.vuejs.org/config/#chainwebpack) properties of the `vue.config.js` file\n(needs to be created, first, in fresh projects).\n\nIn **Angular** projects, externals can be defined using\n[custom webpack builders](https://github.com/just-jeb/angular-builders/tree/master/packages/custom-webpack).\n\nIn **React** (`create-react-app`) projects, externals can be defined by either using\n[react-app-rewired](https://github.com/timarney/react-app-rewired) or ejecting.\n\n### TypeScript/Angular/Webpack/React/etc. Configuration:\n\njsPDF can be imported just like any other 3rd party library. This works with all major toolkits and frameworks. jsPDF\nalso offers a typings file for TypeScript projects.\n\n```js\nimport { jsPDF } from \"jspdf\";\n```\n\nYou can add jsPDF to your meteor-project as follows:\n\n```\nmeteor add jspdf:core\n```\n\n### Polyfills\n\njsPDF requires modern browser APIs in order to function. To use jsPDF in older browsers like Internet Explorer,\npolyfills are required. You can load all required polyfills as follows:\n\n```js\nimport \"jspdf/dist/polyfills.es.js\";\n```\n\nAlternatively, you can load the prebundled polyfill file. This is not recommended, since you might end up\nloading polyfills multiple times. Might still be nifty for small applications or quick POCs.\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/polyfills.umd.js\"></script>\n```\n\n## Use of Unicode Characters / UTF-8:\n\nThe 14 standard fonts in PDF are limited to the ASCII-codepage. If you want to use UTF-8 you have to integrate a\ncustom font, which provides the needed glyphs. jsPDF supports .ttf-files. So if you want to have for example\nChinese text in your pdf, your font has to have the necessary Chinese glyphs. So, check if your font supports\nthe wanted glyphs or else it will show garbled characters instead of the right text.\n\nTo add the font to jsPDF use our fontconverter in\n[/fontconverter/fontconverter.html](https://rawgit.com/MrRio/jsPDF/master/fontconverter/fontconverter.html).\nThe fontconverter will create a js-file with the content of the provided ttf-file as base64 encoded string\nand additional code for jsPDF. You just have to add this generated js-File to your project.\nYou are then ready to go to use setFont-method in your code and write your UTF-8 encoded text.\n\nAlternatively you can just load the content of the \\*.ttf file as a binary string using `fetch` or `XMLHttpRequest` and\nadd the font to the PDF file:\n\n```js\nconst doc = new jsPDF();\n\nconst myFont = ... // load the *.ttf font file as binary string\n\n// add the font to jsPDF\ndoc.addFileToVFS(\"MyFont.ttf\", myFont);\ndoc.addFont(\"MyFont.ttf\", \"MyFont\", \"normal\");\ndoc.setFont(\"MyFont\");\n```\n\n## Advanced Functionality\n\nSince the merge with the [yWorks fork](https://github.com/yWorks/jsPDF) there are a lot of new features. However, some\nof them are API breaking, which is why there is an API-switch between two API modes:\n\n- In \"compat\" API mode, jsPDF has the same API as MrRio's original version, which means full compatibility with plugins.\n  However, some advanced features like transformation matrices and patterns won't work. This is the default mode.\n- In \"advanced\" API mode, jsPDF has the API you're used from the yWorks-fork version. This means the availability of\n  all advanced features like patterns, FormObjects, and transformation matrices.\n\nYou can switch between the two modes by calling\n\n```javascript\ndoc.advancedAPI(doc => {\n  // your code\n});\n// or\ndoc.compatAPI(doc => {\n  // your code\n});\n```\n\nJsPDF will automatically switch back to the original API mode after the callback has run.\n\n## Support\n\nPlease check if your question is already handled at Stackoverflow <https://stackoverflow.com/questions/tagged/jspdf>.\nFeel free to ask a question there with the tag `jspdf`.\n\nFeature requests, bug reports, etc. are very welcome as issues. Note that bug reports should follow these guidelines:\n\n- A bug should be reported as an [mcve](https://stackoverflow.com/help/mcve)\n- Make sure code is properly indented and [formatted](https://help.github.com/articles/basic-writing-and-formatting-syntax/#quoting-code) (Use ``` around code blocks)\n- Provide a runnable example.\n- Try to make sure and show in your issue that the issue is actually related to jspdf and not your framework of choice.\n\n## Contributing\n\njsPDF cannot live without help from the community! If you think a feature is missing or you found a bug, please consider\nif you can spare one or two hours and prepare a pull request. If you're simply interested in this project and want to\nhelp, have a look at the open issues, especially those labeled with \"bug\".\n\nYou can find information about building and testing jsPDF in the\n[contribution guide](https://github.com/MrRio/jsPDF/blob/master/CONTRIBUTING.md#pull-requests)\n\n## Credits\n\n- Big thanks to Daniel Dotsenko from [Willow Systems Corporation](https://github.com/willowsystems) for making huge contributions to the codebase.\n- Thanks to Ajaxian.com for [featuring us back in 2009](http://ajaxian.com/archives/dynamically-generic-pdfs-with-javascript).\n- Our special thanks to GH Lee ([sphilee](https://github.com/sphilee)) for programming the ttf-file-support and providing a large and long sought after feature\n- Everyone else that's contributed patches or bug reports. You rock.\n\n## License (MIT)\n\nCopyright\n(c) 2010-2021 James Hall, https://github.com/MrRio/jsPDF\n(c) 2015-2021 yWorks GmbH, https://www.yworks.com/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
    "licenseText": "Copyright\n(c) 2010-2021 James Hall, https://github.com/MrRio/jsPDF\n(c) 2015-2021 yWorks GmbH, https://www.yworks.com/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/jspdf/-/jspdf-2.5.1.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/jspdf/-/jspdf-2.5.1.tgz",
    "hash": "",
    "integrity": "sha512-hXObxz7ZqoyhxET78+XR34Xu2qFGrJJ2I2bE5w4SM8eFaFEkW2xcGRVUss360fYelwRSid/jT078kbNvmoW0QA==",
    "registry": "npm",
    "packageName": "jspdf",
    "cacheIntegrity": "sha512-hXObxz7ZqoyhxET78+XR34Xu2qFGrJJ2I2bE5w4SM8eFaFEkW2xcGRVUss360fYelwRSid/jT078kbNvmoW0QA== sha1-AMhSUKv1RHoF87MquZNatKVlksw="
  },
  "registry": "npm",
  "hash": "85739bc73ed9aa8ca1c444fbf3e5d1df85eedaa146ac92762366c4e70e1233c7856851245b6c5c191554b2cdfad1f61e97045289dfe34f4efc91b36f9a85b440"
}