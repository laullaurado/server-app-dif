{
  "manifest": {
    "name": "css-box-model",
    "version": "1.2.1",
    "description": "Get accurate and well named css box model information about an Element ðŸ“¦",
    "author": {
      "name": "Alex Reardon",
      "email": "alexreardon@gmail.com"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/alexreardon/css-box-model.git"
    },
    "bugs": {
      "url": "https://github.com/alexreardon/css-box-model/issues"
    },
    "keywords": [
      "css",
      "box model",
      "css box model",
      "getBoundingClientRect",
      "DOMRect",
      "ClientRect",
      "Rect",
      "Spacing",
      "DOM"
    ],
    "files": [
      "/dist",
      "/src"
    ],
    "main": "dist/css-box-model.cjs.js",
    "module": "dist/css-box-model.esm.js",
    "types": "src/index.d.ts",
    "sideEffects": false,
    "scripts": {
      "test": "yarn jest",
      "lint": "yarn prettier --debug-check src/** test/**",
      "validate": "yarn lint && flow check",
      "build:clean": "rimraf dist",
      "build:flow": "echo \"// @flow\n\nexport * from '../src';\" > dist/css-box-model.cjs.js.flow",
      "build:dist": "yarn rollup --config rollup.config.js",
      "build": "yarn build:clean && yarn build:dist && yarn build:flow",
      "prepublishOnly": "yarn build"
    },
    "devDependencies": {
      "@babel/core": "^7.5.5",
      "@babel/preset-env": "^7.5.5",
      "@babel/preset-flow": "^7.0.0",
      "babel-plugin-dev-expression": "^0.2.2",
      "flow-bin": "0.106.1",
      "jest": "^24.9.0",
      "prettier": "1.18.2",
      "rimraf": "^3.0.0",
      "rollup": "^1.20.2",
      "rollup-plugin-babel": "^4.3.3",
      "rollup-plugin-node-resolve": "^5.2.0",
      "rollup-plugin-replace": "^2.2.0",
      "rollup-plugin-terser": "^5.1.1"
    },
    "dependencies": {
      "tiny-invariant": "^1.0.6"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-css-box-model-1.2.1-59951d3b81fd6b2074a62d49444415b0d2b4d7c1-integrity/node_modules/css-box-model/package.json",
    "readmeFilename": "README.md",
    "readme": "# `css-box-model` ðŸ“¦\n\nGet accurate and well named [CSS Box Model](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model) information about a [`Element`](https://developer.mozilla.org/en-US/docs/Web/API/Element).\n\n[![Build Status](https://travis-ci.org/alexreardon/css-box-model.svg?branch=master)](https://travis-ci.org/alexreardon/css-box-model)\n[![npm](https://img.shields.io/npm/v/css-box-model.svg)](https://www.npmjs.com/package/css-box-model)\n[![dependencies](https://david-dm.org/alexreardon/css-box-model.svg)](https://david-dm.org/alexreardon/css-box-model)\n[![Downloads per month](https://img.shields.io/npm/dm/css-box-model.svg)](https://www.npmjs.com/package/css-box-model)\n[![min](https://img.shields.io/bundlephobia/min/css-box-model.svg)](https://www.npmjs.com/package/css-box-model)\n[![minzip](https://img.shields.io/bundlephobia/minzip/css-box-model.svg)](https://www.npmjs.com/package/css-box-model)\n\nAny time you are using [`Element.getBoundingClientRect()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect) you might want to consider using `css-box-model` instead to get more detailed box model information.\n\n## Usage\n\n```js\n// @flow\nimport { getBox } from 'css-box-model';\n\nconst el: HTMLElement = document.getElementById('foo');\nconst box: BoxModel = getBox(el);\n\n// profit\n```\n\n## Installation\n\n```bash\n## yarn\nyarn add css-box-model\n\n# npm\nnpm install css-box-model --save\n```\n\n## The [CSS Box Model](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model)\n\n![the box model](https://user-images.githubusercontent.com/2182637/46847224-f8a23e80-ce2e-11e8-80d6-0ca62a1871a7.png)\n\n| Box type    | Composition                         |\n| ----------- | ----------------------------------- |\n| Margin box  | margin + border + padding + content |\n| Border box  | border + padding + content          |\n| Padding box | padding + content                   |\n| Content box | content                             |\n\nThis our returned `BoxModel`:\n\n```js\nexport type BoxModel = {|\n  // content + padding + border + margin\n  marginBox: Rect,\n  // content + padding + border\n  borderBox: Rect,\n  // content + padding\n  paddingBox: Rect,\n  // content\n  contentBox: Rect,\n  // for your own consumption\n  border: Spacing,\n  padding: Spacing,\n  margin: Spacing,\n|};\n\n// Supporting types\n\n// This is an extension of DOMRect and ClientRect\nexport type Rect = {|\n  // ClientRect\n  top: number,\n  right: number,\n  bottom: number,\n  left: number,\n  width: number,\n  height: number,\n  // DOMRect\n  x: number,\n  y: number,\n  // Rect\n  center: Position,\n|};\n\nexport type Position = {|\n  x: number,\n  y: number,\n|};\n\nexport type Spacing = {\n  top: number,\n  right: number,\n  bottom: number,\n  left: number,\n};\n```\n\n## API\n\n### `getBox`\n\n> (el: HTMLElement) => BoxModel\n\nUse `getBox` to return the box model for an element\n\n### `withScroll`\n\n> `(original: BoxModel, scroll?: Position = getWindowScroll()) => BoxModel`\n\nThis is useful if you want to know the box model for an element relative to a page\n\n```js\nconst el: HTMLElement = document.getElementById('app');\nconst box: BoxModel = getBox(el);\nconst withScroll: BoxModel = withScroll(box);\n```\n\nYou are welcome to pass in your own `scroll`. By default we we use the window scroll:\n\n```js\nconst getWindowScroll = (): Position => ({\n  x: window.pageXOffset,\n  y: window.pageYOffset,\n});\n```\n\n### `calculateBox`\n\n> `(borderBox: AnyRectType, styles: CSSStyleDeclaration) => BoxModel`\n\nThis will do the box model calculations without needing to read from the DOM. This is useful if you have already got a `ClientRect` / `DOMRect` and a `CSSStyleDeclaration` as then we can skip computing these values.\n\n```js\nconst el: HTMLElement = document.getElementById('app');\nconst borderBox: ClientRect = el.getBoundingClientRect();\nconst styles: CSSStyleDeclaration = window.getComputedStyles(el);\n\nconst box: BoxModel = calculateBox(borderBox, styles);\n```\n\n**`AnyRectType`** allows for simple interoperability with any rect type\n\n```js\ntype AnyRectType = ClientRect | DOMRect | Rect | Spacing;\n```\n\n### `createBox`\n\n> `({ borderBox, margin, border, padding }: CreateBoxArgs) => BoxModel`\n\nAllows you to create a `BoxModel` by passing in a `Rect` like shape (`AnyRectType`) and optionally your own `margin`, `border` and or `padding`.\n\n```js\ntype CreateBoxArgs = {|\n  borderBox: AnyRectType,\n  margin?: Spacing,\n  border?: Spacing,\n  padding?: Spacing,\n|};\n```\n\n```js\nconst borderBox: Spacing = {\n  top: 10,\n  right: 100,\n  left: 20,\n  bottom: 80,\n};\nconst padding: Spacing = {\n  top: 10,\n  right: 20,\n  left: 20,\n  bottom: 10,\n};\n\nconst box: BoxModel = createBox({ borderBox, padding });\n```\n\n## Utility API\n\n> Functions to help you interact with the objects we provide\n\n### `getRect`\n\n> `(spacing: AnyRectType) => Rect`\n\nGiven any `Rect` like shape, return a `Rect`. Accepts any object that has `top`, `right`, `bottom` and `right` (eg `ClientRect`, `DOMRect`);\n\n```js\nconst spacing: Spacing = {\n  top: 0,\n  right: 100,\n  bottom: 50,\n  left: 50,\n};\n\nconst rect: Rect = getRect(spacing);\n\nconsole.log(rect);\n\n/*\n{\n  top: 0,\n  right: 100,\n  bottom: 50,\n  left: 50,\n  width: 100,\n  height: 50,\n  x: 0,\n  y: 0,\n  center: { x: 50, y: 50 },\n}\n*/\n```\n\n### `expand`\n\nUsed to expand a `Spacing`\n\n```js\n(target: Spacing, expandBy: Spacing) => Spacing;\n```\n\n```js\nconst original: Spacing = {\n  top: 10,\n  left: 11,\n  right: 21,\n  bottom: 22,\n};\n\nconst expandBy: Spacing = {\n  top: 1,\n  left: 2,\n  right: 3,\n  bottom: 4,\n};\n\nconst expanded: Spacing = expand(original, expandBy);\n\nconsole.log(expanded);\n\n/*\n{\n  // pulled back\n  top: 8,\n  left: 8\n  // pushed forward\n  bottom: 22,\n  right: 22,\n}\n*/\n```\n\n### `shrink`\n\nUsed to shrink a `Spacing`\n\n```js\n(target: Spacing, shrinkBy: Spacing) => Spacing;\n```\n\n```js\nconst original: Spacing = {\n  top: 10,\n  left: 10,\n  right: 20,\n  bottom: 20,\n};\n\nconst shrinkBy: Spacing = {\n  top: 2,\n  left: 2,\n  right: 2,\n  bottom: 2,\n};\n\nconst smaller: Spacing = shrink(original, shrinkBy);\n\nconsole.log(smaller);\n\n/*\n{\n  // pushed forward\n  top: 12,\n  left: 12\n  // pulled back\n  bottom: 18,\n  right: 18,\n}\n*/\n```\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Alex Reardon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/css-box-model/-/css-box-model-1.2.1.tgz#59951d3b81fd6b2074a62d49444415b0d2b4d7c1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/css-box-model/-/css-box-model-1.2.1.tgz",
    "hash": "59951d3b81fd6b2074a62d49444415b0d2b4d7c1",
    "integrity": "sha512-a7Vr4Q/kd/aw96bnJG332W9V9LkJO69JRcaCYDUqjp6/z0w6VcZjgAcTbgFxEPfBgdnAwlh3iwu+hLopa+flJw==",
    "registry": "npm",
    "packageName": "css-box-model",
    "cacheIntegrity": "sha512-a7Vr4Q/kd/aw96bnJG332W9V9LkJO69JRcaCYDUqjp6/z0w6VcZjgAcTbgFxEPfBgdnAwlh3iwu+hLopa+flJw== sha1-WZUdO4H9ayB0pi1JREQVsNK018E="
  },
  "registry": "npm",
  "hash": "59951d3b81fd6b2074a62d49444415b0d2b4d7c1"
}