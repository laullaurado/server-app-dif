import { ComponentLoader, FeatureType } from 'adminjs';
/**
 * Hashing function used to convert the password
 *
 * @alias HashingFunction
 * @memberof module:@adminjs/passwords
 * @returns {Promise<string> | string}
 */
export type HashingFunction = (
/**
 * Password which should be hashed
 */
password: string) => (Promise<string> | string);
/**
 * Options passed to {@link module:@adminjs/passwords PasswordsFeature}
 *
 * @alias PasswordsOptions
 * @memberof module:@adminjs/passwords
 */
export type PasswordsOptions = {
    /**
     * Your ComponentLoader instance. It is required for the feature to add it's components.
     */
    componentLoader: ComponentLoader;
    /**
     * Names of the properties used by the feature
     */
    properties?: {
        /**
         * Virtual property which will be seen by end user. Its value is not stored in the database.
         * Default to `password`
         */
        password?: string;
        /**
         * Property where encrypted password will be stored. Default to `encryptedPassword`
         */
        encryptedPassword?: string;
    };
    /**
     * Function used to hash the password. You can pass function from the external library
     * Example using [Argon2](https://www.npmjs.com/package/argon2).: `hash: argon2.hash`
     *
     */
    hash: HashingFunction;
};
export type Custom = {
    [T in keyof NonNullable<PasswordsOptions['properties']>]: NonNullable<T>;
};
declare const passwordsFeature: (options: PasswordsOptions) => FeatureType;
export default passwordsFeature;
