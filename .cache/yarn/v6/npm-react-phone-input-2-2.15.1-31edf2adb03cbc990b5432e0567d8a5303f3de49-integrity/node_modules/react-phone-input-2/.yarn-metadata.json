{
  "manifest": {
    "name": "react-phone-input-2",
    "version": "2.15.1",
    "description": "A react component to format phone numbers",
    "main": "lib/lib.js",
    "typings": "index.d.ts",
    "scripts": {
      "test": "jest",
      "start": "TARGET=dev_js NODE_ENV=development webpack-dev-server --progress",
      "start:css": "TARGET=dev_css NODE_ENV=development webpack-dev-server --progress",
      "build": "export SET NODE_OPTIONS=--openssl-legacy-provider && npm run build:js && npm run build:css",
      "build:js": "TARGET=build_js NODE_ENV=production webpack -p --progress",
      "build:css": "TARGET=build_css NODE_ENV=production webpack -p --progress && rm ./main.js",
      "prepublishOnly": "npm run build",
      "analyze": "TARGET=analyze NODE_ENV=production webpack -p --progress"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/bl00mber/react-phone-input-2.git"
    },
    "keywords": [
      "react",
      "phone",
      "format",
      "number",
      "input",
      "telephone",
      "javascript",
      "international",
      "tel",
      "localized",
      "material",
      "bootstrap",
      "i18n"
    ],
    "files": [
      "lang",
      "lib",
      "LICENSE",
      "README.md",
      "index.d.ts"
    ],
    "author": {
      "name": "Nick Reiley",
      "email": "bloomber111@gmail.com",
      "url": "https://github.com/bl00mber"
    },
    "contributors": [
      {
        "name": "Raza Gill",
        "email": "raza.gill@outlook.com",
        "url": "https://github.com/razagill"
      }
    ],
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/bl00mber/react-phone-input-2/issues"
    },
    "homepage": "https://github.com/bl00mber/react-phone-input-2",
    "jest": {
      "moduleNameMapper": {
        "\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2)$": "<rootDir>/test/__mocks__/fileMock.js",
        "\\.(css|less|stylus|scss)$": "<rootDir>/test/__mocks__/styleMock.js"
      },
      "globals": {
        "__DEV__": false
      }
    },
    "devDependencies": {
      "@babel/core": "^7.3.3",
      "babel-loader": "^8.0.5",
      "babel-preset-react-app": "^7.0.1",
      "css-loader": "^2.1.0",
      "extract-loader": "^3.1.0",
      "file-loader": "^5.0.2",
      "jest": "^24.7.0",
      "less": "^3.9.0",
      "less-loader": "^4.1.0",
      "react": "^17.0.2",
      "react-dom": "^17.0.2",
      "react-hot-loader": "^4.6.5",
      "react-testing-library": "^6.0.4",
      "style-loader": "^0.23.1",
      "url-loader": "^1.1.2",
      "webpack": "^4.29.5",
      "webpack-bundle-analyzer": "^3.0.4",
      "webpack-cli": "^3.2.3",
      "webpack-dev-server": "^3.1.14",
      "webpack-merge": "^4.2.1"
    },
    "peerDependencies": {
      "react": "^16.12.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^20.0.0 || ^21.0.0",
      "react-dom": "^16.12.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^20.0.0 || ^21.0.0"
    },
    "dependencies": {
      "classnames": "^2.2.6",
      "lodash.debounce": "^4.0.8",
      "lodash.memoize": "^4.1.2",
      "lodash.reduce": "^4.6.0",
      "lodash.startswith": "^4.2.1",
      "prop-types": "^15.7.2"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-react-phone-input-2-2.15.1-31edf2adb03cbc990b5432e0567d8a5303f3de49-integrity/node_modules/react-phone-input-2/package.json",
    "readmeFilename": "README.md",
    "readme": "# React-Phone-Input-2\n## DONATIONS / FUNDING NEEDED\n<ins>bitcoin</ins> bc1qa7q6gf9e06ssqrc46j5lekq886rlyyk6sdhjj0</br>\n<ins>ethereum</ins> 0x2b9429a7362a9b14f3d84a408d33caab29bdc225</br>\n___\nHighly customizable phone input component with auto formatting.\n\n[![npm version](https://img.shields.io/npm/v/react-phone-input-2.svg?style=flat)](https://www.npmjs.com/package/react-phone-input-2)\n[![npm downloads](https://img.shields.io/npm/dm/react-phone-input-2.svg?style=flat)](https://www.npmjs.com/package/react-phone-input-2)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/bl00mber/react-phone-input-2#contributing)\n[![travis build](https://travis-ci.org/bl00mber/react-phone-input-2.svg?branch=master)](https://travis-ci.org/bl00mber/react-phone-input-2)\n\n![animation](https://media.giphy.com/media/xiORAWnqoTJDsH0UOI/giphy.gif)\n\n## Installation\n```shell-script\nnpm install react-phone-input-2 --save\n```\n\n## Usage\n```jsx\nimport PhoneInput from 'react-phone-input-2'\nimport 'react-phone-input-2/lib/style.css'\n\n<PhoneInput\n  country={'us'}\n  value={this.state.phone}\n  onChange={phone => this.setState({ phone })}\n/>\n```\n**available styles** - style • high-res • material • bootstrap • semantic-ui • plain\n\n#### [Demo 1 (UI)](https://bl00mber.github.io/react-phone-input-2.html) - [Demo 2 (CSS)](https://bl00mber.github.io/react-phone-input-2-css.html)\n\n![screenshot](https://raw.githubusercontent.com/bl00mber/react-phone-input-2/master/test/screenshot.png)\n\n## Options\n<table>\n  <tr>\n    <th> Name </th>\n    <th> Type </th>\n    <th> Description </th>\n    <th> Example </th>\n  </tr>\n  <tr>\n    <td> country </td>\n    <td> string </td>\n    <td> initial country </td>\n    <td> 'us' | 1 </td>\n  </tr>\n  <tr>\n    <td> value </td>\n    <td> string </td>\n    <td colspan=\"2\"> input state value </td>\n  </tr>\n\n  <tr>\n    <td> onlyCountries </td>\n    <td> array </td>\n    <td> country codes to be included </td>\n    <td> ['cu','cw','kz'] </td>\n  </tr>\n  <tr>\n    <td> preferredCountries </td>\n    <td> array </td>\n    <td> country codes to be at the top </td>\n    <td> ['cu','cw','kz'] </td>\n  </tr>\n  <tr>\n    <td> excludeCountries </td>\n    <td> array </td>\n    <td> array of country codes to be excluded </td>\n    <td> ['cu','cw','kz'] </td>\n  </tr>\n\n  <tr>\n    <td> placeholder </td>\n    <td> string </td>\n    <td colspan=\"2\"> custom placeholder </td>\n  </tr>\n\n  <tr>\n    <td> inputProps </td>\n    <td> object </td>\n    <td colspan=\"2\"> props to pass into the input </td>\n  </tr>\n</table>\n\n<table>\n  <tr>\n    <th> Booleans </th>\n    <th> Default </th>\n    <th> Description </th>\n  </tr>\n  <tr>\n    <td> autoFormat </td>\n    <td> true </td>\n    <td> on/off phone formatting </td>\n  </tr>\n  <tr>\n    <td> disabled </td>\n    <td> false </td>\n    <td> disable input and dropdown </td>\n  </tr>\n  <tr>\n    <td> disableDropdown </td>\n    <td> false </td>\n    <td> disable dropdown only </td>\n  </tr>\n  <tr>\n    <td> disableCountryCode </td>\n    <td> false </td>\n    <td> </td>\n  </tr>\n  <tr>\n    <td> enableAreaCodes </td>\n    <td> false </td>\n    <td> enable local codes for all countries </td>\n  </tr>\n  <tr>\n    <td> enableTerritories </td>\n    <td> false </td>\n    <td> enable dependent territories with population of ~100,000 or lower </td>\n  </tr>\n  <tr>\n    <td> enableLongNumbers </td>\n    <td> false </td>\n    <td> boolean/number </td>\n  </tr>\n  <tr>\n    <td> countryCodeEditable </td>\n    <td> true </td>\n    <td> </td>\n  </tr>\n  <tr>\n    <td> enableSearch </td>\n    <td> false </td>\n    <td> enable search in the dropdown </td>\n  </tr>\n  <tr>\n    <td> disableSearchIcon </td>\n    <td> false </td>\n    <td> hide icon for the search field </td>\n  </tr>\n</table>\n\n```jsx\n<PhoneInput\n  inputProps={{\n    name: 'phone',\n    required: true,\n    autoFocus: true\n  }}\n/>\n```\n\n### Contents\n- [Style](#style)\n- [Events](#events)\n- [Regions](#regions)\n- [Localization](#predefined-localization)\n- [Local area codes](#local-area-codes)\n- [Custom masks](#custom-masks)\n- [Custom area codes](#custom-area-codes)\n- [Other props](#other-props)\n- [Custom localization](#custom-localization)\n- [Guides](#guides)\n  - [Phone without dialCode](#phone-without-dialcode)\n  - [Check validity of the phone number](#check-validity-of-the-phone-number)\n  - [CDN](#cdn)\n- [Contributing](#contributing)\n- [Support](https://www.paypal.me/bloomber/20)\n\n### Style\n<table>\n  <tr>\n    <td> containerClass </td>\n    <td> string </td>\n    <td colspan=\"2\"> class for container </td>\n  </tr>\n  <tr>\n    <td> inputClass </td>\n    <td> string </td>\n    <td colspan=\"2\"> class for input </td>\n  </tr>\n  <tr>\n    <td> buttonClass </td>\n    <td> string </td>\n    <td colspan=\"2\"> class for dropdown button </td>\n  </tr>\n  <tr>\n    <td> dropdownClass </td>\n    <td> string </td>\n    <td colspan=\"2\"> class for dropdown container </td>\n  </tr>\n  <tr>\n    <td> searchClass </td>\n    <td> string </td>\n    <td colspan=\"2\"> class for search field </td>\n  </tr>\n\n  <tr>\n    <td> containerStyle </td>\n    <td> object </td>\n    <td colspan=\"2\"> styles for container </td>\n  </tr>\n  <tr>\n    <td> inputStyle </td>\n    <td> object </td>\n    <td colspan=\"2\"> styles for input </td>\n  </tr>\n  <tr>\n    <td> buttonStyle </td>\n    <td> object </td>\n    <td colspan=\"2\"> styles for dropdown button </td>\n  </tr>\n  <tr>\n    <td> dropdownStyle </td>\n    <td> object </td>\n    <td colspan=\"2\"> styles for dropdown container </td>\n  </tr>\n  <tr>\n    <td> searchStyle </td>\n    <td> object </td>\n    <td colspan=\"2\"> styles for search field </td>\n  </tr>\n</table>\n\n### Events\n<table>\n  <tr>\n    <td> onChange </td>\n    <td> onFocus </td>\n    <td> onBlur </td>\n    <td> onClick </td>\n    <td> onKeyDown </td>\n  </tr>\n</table>\n\nonChange(value, country, e, formattedValue)\n\nCountry data object not returns from onKeyDown event\n\n<table>\n  <tr>\n    <th> Data </th>\n    <th> Type </th>\n    <th> Description </th>\n  </tr>\n  <tr>\n    <td> value/event </td>\n    <td> string/object </td>\n    <td> event or the phone number </td>\n  </tr>\n  <tr>\n    <td> country data </td>\n    <td> object </td>\n    <td> country object { name, dialCode, countryCode (iso2) } </td>\n  </tr>\n</table>\n\n### Regions\n<table>\n  <tr>\n    <th> Name </th>\n    <th> Type </th>\n    <th> Description </th>\n  </tr>\n  <tr>\n    <td> regions </td>\n    <td> array/string </td>\n    <td> to show countries only from specified regions </td>\n  </tr>\n</table>\n\n<table>\n  <tr>\n    <th> Regions </th>\n  </tr>\n  <tr>\n    <td> ['america', 'europe', 'asia', 'oceania', 'africa'] </td>\n  </tr>\n  <tr>\n    <th> Subregions </th>\n  </tr>\n  <tr>\n    <td> ['north-america', 'south-america', 'central-america', 'carribean', 'eu-union', 'ex-ussr', 'ex-yugos', 'baltic', 'middle-east', 'north-africa'] </td>\n  </tr>\n</table>\n\n```jsx\n<PhoneInput\n  country='de'\n  regions={'europe'}\n/>\n\n<PhoneInput\n  country='us'\n  regions={['north-america', 'carribean']}\n/>\n```\n\n### Predefined localization\n`es` Spanish, `de` Deutsch, `ru` Russian, `fr` French<br/>\n`jp` Japanese, `cn` Chinese, `pt` Portuguese, `it` Italian<br/>\n`ir` Iranian, `ar` Arabic, `tr` Turkish, `id` Indonesian<br/>\n`hu` Hungarian, `pl` Polish, `ko` Korean\n\n```jsx\nimport es from 'react-phone-input-2/lang/es.json'\n\n<PhoneInput\n  localization={es}\n/>\n```\n\n### Local area codes\n```jsx\n<PhoneInput\n  enableAreaCodes={true}\n  enableAreaCodes={['us', 'ca']}\n  enableAreaCodeStretch\n/>\n```\n\n#### Flexible mask\nIf `enableAreaCodeStretch` is added, the part of the mask with the area code will not stretch to length of the respective section of phone mask.\nExample: `+61 (2), +61 (02)`\n\n### Custom masks\n```jsx\n<PhoneInput\n  onlyCountries={['fr', 'at']}\n  masks={{fr: '(...) ..-..-..', at: '(....) ...-....'}}\n/>\n```\n\n### Custom area codes\n```jsx\n<PhoneInput\n  onlyCountries={['gr', 'fr', 'us']}\n  areaCodes={{gr: ['2694', '2647'], fr: ['369', '463'], us: ['300']}}\n/>\n```\n\n### Other props\n<table>\n  <tr>\n    <td> defaultMask </td>\n    <td> ... ... ... ... .. </td>\n  </tr>\n  <tr>\n    <td> alwaysDefaultMask </td>\n    <td> false </td>\n  </tr>\n  <tr>\n    <td> prefix </td>\n    <td> + </td>\n  </tr>\n  <tr>\n    <td> searchPlaceholder </td>\n    <td> 'search' </td>\n  </tr>\n  <tr>\n    <td> searchNotFound </td>\n    <td> 'No entries to show' </td>\n  </tr>\n\n  <tr>\n    <td> copyNumbersOnly </td>\n    <td> true </td>\n  </tr>\n  <tr>\n    <td> renderStringAsFlag </td>\n    <td> string </td>\n  </tr>\n  <tr>\n    <td> autocompleteSearch </td>\n    <td> false </td>\n  </tr>\n  <tr>\n    <td> jumpCursorToEnd </td>\n    <td> false </td>\n  </tr>\n  <tr>\n    <td> priority </td>\n    <td> {{ca: 0, us: 1, kz: 0, ru: 1}} </td>\n  </tr>\n  <tr>\n    <td> enableClickOutside </td>\n    <td> true </td>\n  </tr>\n  <tr>\n    <td> showDropdown </td>\n    <td> false </td>\n  </tr>\n  <tr>\n    <td> defaultErrorMessage </td>\n    <td> string </td>\n  </tr>\n  <tr>\n    <td> specialLabel </td>\n    <td> string </td>\n  </tr>\n  <tr>\n    <td> disableInitialCountryGuess </td>\n    <td> false </td>\n  </tr>\n  <tr>\n    <td> disableCountryGuess </td>\n    <td> false </td>\n  </tr>\n</table>\n\n### Custom localization\n```jsx\n<PhoneInput\n  onlyCountries={['de', 'es']}\n  localization={{de: 'Deutschland', es: 'España'}}\n/>\n\n<PhoneInput\n  onlyCountries={['de', 'es']}\n  localization={{'Germany': 'Deutschland', 'Spain': 'España'}}\n/>\n```\n\n### Preserve countries order\n```jsx\n<PhoneInput\n  onlyCountries={['fr', 'at']}\n  preserveOrder={['onlyCountries', 'preferredCountries']}\n/>\n```\n\n## Guides\n### Phone without dialCode\n```jsx\nhandleOnChange(value, data, event, formattedValue) {\n  this.setState({ rawPhone: value.slice(data.dialCode.length) })\n}\n```\n\n### Check validity of the phone number\n`isValid(value, country, countries, hiddenAreaCodes)`\n\n```jsx\n<PhoneInput\n  isValid={(value, country) => {\n    if (value.match(/12345/)) {\n      return 'Invalid value: '+value+', '+country.name;\n    } else if (value.match(/1234/)) {\n      return false;\n    } else {\n      return true;\n    }\n  }}\n/>\n```\n\n```jsx\nimport startsWith from 'lodash.startswith';\n\n<PhoneInput\n  isValid={(inputNumber, country, countries) => {\n    return countries.some((country) => {\n      return startsWith(inputNumber, country.dialCode) || startsWith(country.dialCode, inputNumber);\n    });\n  }}\n/>\n```\n\n### Clear country\nTo clear `country`, pass `null` as `value`.\n\n### Dynamic placeholder\n<details>\n  <summary>Show</summary>\n\n```jsx\nconst phoneCountryFormat = useMemo(() => phoneCountry?.format || undefined, [phoneCountry]);\nconst placeholder = useMemo(() => {\n  if (phoneCountryFormat) {\n    const words = phoneCountryFormat.split(' ');\n    words.shift(); // I'm using only local numbers so here I remove the country code from the format\n    let text = words.join(' ');\n     // first digit is special on french numbers, these 3 lines could be removed\n    if (country === 'fr') {\n      text = text.replace('.', '6');\n    }\n    while (text.indexOf('.') > -1) {\n      text = text.replace('.', `${Math.min(9, Math.max(1, Math.floor(Math.random() * 10)))}`);\n    }\n    return text;\n  }\n  return '';\n}, [phoneCountryFormat, country]);\n```\n</details>\n\n### CDN\n```html\n<script src=\"https://unpkg.com/react-phone-input-2@2.x/dist/lib.js\"></script>\n```\n\n## Contributing\n- Code style changes not allowed\n- Do not create issues about incorrect or missing country masks (of already present countries) or absent area codes (they will be closed). Only create issues if the subject is an actual mechanism that is not present in the component. Otherwise create a PR with a link that proves the correctness of your newly suggested mask or list of area codes\n- Do not send new languages\n\n## License\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/bl00mber/react-phone-input-2/blob/master/LICENSE)\n\nBased on [react-phone-input](https://github.com/razagill/react-phone-input)\n\nMake sure you donated for lib maintenance [![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.me/bloomber/20)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2017-2020 Nick Reiley <bloomber111@gmail.com> (https://github.com/bl00mber)\nCopyright (c) 2015-2017 Raza Gill <raza.gill@outlook.com> (https://github.com/razagill)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-phone-input-2/-/react-phone-input-2-2.15.1.tgz#31edf2adb03cbc990b5432e0567d8a5303f3de49",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-phone-input-2/-/react-phone-input-2-2.15.1.tgz",
    "hash": "31edf2adb03cbc990b5432e0567d8a5303f3de49",
    "integrity": "sha512-W03abwhXcwUoq+vUFvC6ch2+LJYMN8qSOiO889UH6S7SyMCQvox/LF3QWt+cZagZrRdi5z2ON3omnjoCUmlaYw==",
    "registry": "npm",
    "packageName": "react-phone-input-2",
    "cacheIntegrity": "sha512-W03abwhXcwUoq+vUFvC6ch2+LJYMN8qSOiO889UH6S7SyMCQvox/LF3QWt+cZagZrRdi5z2ON3omnjoCUmlaYw== sha1-Me3yrbA8vJkLVDLgVn2KUwPz3kk="
  },
  "registry": "npm",
  "hash": "31edf2adb03cbc990b5432e0567d8a5303f3de49"
}