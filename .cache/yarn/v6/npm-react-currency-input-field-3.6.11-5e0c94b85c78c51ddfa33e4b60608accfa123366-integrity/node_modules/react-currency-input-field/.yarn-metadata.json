{
  "manifest": {
    "name": "react-currency-input-field",
    "version": "3.6.11",
    "description": "React <input/> component for formatting currency and numbers.",
    "files": [
      "dist/**/*",
      "src/**/*"
    ],
    "main": "dist/index.js",
    "module": "dist/index.esm.js",
    "types": "dist/index.d.ts",
    "homepage": "https://github.com/cchanxzy/react-currency-input-field",
    "scripts": {
      "build": "rm -rf dist && tsc && rollup -c",
      "start": "parcel src/examples/index.html",
      "test": "LANG=en_GB jest --coverage --roots ./src",
      "test-ci": "LANG=en_GB.UTF-8 cross-env NODE_ICU_DATA=node_modules/full-icu jest --coverage",
      "typecheck": "tsc && tsc --project tsconfig.test.json",
      "lint": "eslint src --max-warnings=0",
      "gh-predeploy": "parcel build src/examples/index.html --dist-dir demo/examples --public-url ./",
      "gh-deploy": "yarn gh-predeploy && gh-pages -d demo/examples",
      "ci": "yarn && yarn build",
      "codecov": "codecov",
      "semantic-release": "semantic-release"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/cchanxzy/react-currency-input-field"
    },
    "bugs": {
      "email": "cchan.xzy@gmail.com",
      "url": "https://github.com/cchanxzy/react-currency-input-field/issues"
    },
    "keywords": [
      "react",
      "component",
      "currency",
      "form",
      "field",
      "number",
      "input",
      "intl",
      "locale"
    ],
    "author": {
      "name": "cchanxzy"
    },
    "license": "MIT",
    "devDependencies": {
      "@commitlint/cli": "^12.1.4",
      "@commitlint/config-conventional": "^12.1.4",
      "@rollup/plugin-commonjs": "^19.0.0",
      "@rollup/plugin-node-resolve": "^13.0.0",
      "@rollup/plugin-typescript": "^8.2.1",
      "@semantic-release/changelog": "^5.0.1",
      "@semantic-release/git": "^9.0.0",
      "@testing-library/dom": "^7.31.0",
      "@testing-library/jest-dom": "^5.12.0",
      "@testing-library/react": "^11.2.7",
      "@testing-library/user-event": "^13.1.9",
      "@types/jest": "^26.0.23",
      "@types/react": "^17.0.6",
      "@types/react-dom": "^17.0.5",
      "@typescript-eslint/eslint-plugin": "^4.24.0",
      "@typescript-eslint/parser": "^4.24.0",
      "codecov": "^3.8.2",
      "cross-env": "^7.0.3",
      "eslint": "^7.27.0",
      "eslint-config-prettier": "^8.3.0",
      "eslint-plugin-prettier": "^3.4.0",
      "eslint-plugin-react": "^7.23.2",
      "full-icu": "^1.3.4",
      "gh-pages": "^3.1.0",
      "husky": "^6.0.0",
      "jest": "^26.6.3",
      "lint-staged": "^11.0.0",
      "parcel": "^2.0.0-rc.0",
      "prettier": "^2.3.0",
      "react": "^17.0.2",
      "react-dom": "17.0.2",
      "rollup": "^2.52.7",
      "semantic-release": "^17.4.3",
      "source-map-loader": "^3.0.0",
      "ts-jest": "^26.5.6",
      "tslib": "^2.3.0",
      "typescript": "^4.2.4"
    },
    "peerDependencies": {
      "react": "^16.9.0 || ^17.0.0 || ^18.0.0"
    },
    "dependencies": {},
    "jest": {
      "verbose": false,
      "collectCoverage": true,
      "transform": {
        "^.+\\.tsx?$": "ts-jest"
      },
      "testRegex": "(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$",
      "moduleFileExtensions": [
        "ts",
        "tsx",
        "js",
        "jsx"
      ]
    },
    "targets": {
      "main": false,
      "module": false,
      "types": false
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-react-currency-input-field-3.6.11-5e0c94b85c78c51ddfa33e4b60608accfa123366-integrity/node_modules/react-currency-input-field/package.json",
    "readmeFilename": "README.md",
    "readme": "# React Currency Input Field Component\n\n[![npm](https://img.shields.io/npm/v/react-currency-input-field)](https://www.npmjs.com/package/react-currency-input-field) [![NPM](https://img.shields.io/npm/l/react-currency-input-field)](https://www.npmjs.com/package/react-currency-input-field) [![Codecov Coverage](https://img.shields.io/codecov/c/github/cchanxzy/react-currency-input-field)](https://codecov.io/gh/cchanxzy/react-currency-input-field/) [![Release build](https://github.com/cchanxzy/react-currency-input-field/workflows/Release/badge.svg)](https://github.com/cchanxzy/react-currency-input-field/actions?query=workflow%3ARelease)\n\n- [React Currency Input Field Component](#react-currency-input-field-component)\n  - [Features](#features)\n  - [Migrating to v3.0.0](#migrating-to-v300)\n  - [Examples](#examples)\n  - [Install](#install)\n  - [Usage](#usage)\n  - [Props](#props)\n    - [Abbreviations](#abbreviations)\n    - [Prefix and Suffix](#prefix-and-suffix)\n    - [Separators](#separators)\n    - [Intl Locale Config](#intl-locale-config)\n    - [Decimal Scale and Decimals Limit](#decimal-scale-and-decimals-limit)\n    - [Fixed Decimal Length](#fixed-decimal-length)\n  - [Format values for display](#format-values-for-display)\n  - [v3.0.0 Release Notes](#v300-release-notes)\n    - [Breaking Changes](#breaking-changes)\n    - [Improvements in v3](#improvements-in-v3)\n    - [Reasoning](#reasoning)\n  - [Issues](#issues)\n\n## Features\n\n- Allows [abbreviations](#abbreviations) eg. 1k = 1,000 2.5m = 2,500,000\n- Prefix and Suffix options eg. £ or \\$\n- Automatically inserts [group separator](#separators)\n- Accepts [Intl locale config](#intl-locale-config)\n- Can use arrow down/up to step\n- Can allow/disallow decimals\n- Written in TypeScript and has type support\n- Does not use any third party packages\n\n## Migrating to v3.0.0\n\nThere are a number of breaking changes in v3.0.0, please read the [release notes](#v300-release-notes) if migrating from v2 to v3.\n\n:warning: Most important change is: `onChange` has been renamed to `onValueChange`\n\n## Examples\n\n[Play with demo](https://cchanxzy.github.io/react-currency-input-field) or view [examples code](https://github.com/cchanxzy/react-currency-input-field/blob/master/src/examples)\n\n[![React Currency Input Demo](demo/demo.gif)](https://cchanxzy.github.io/react-currency-input-field)\n\n## Install\n\n`npm install react-currency-input-field`\n\nor\n\n`yarn add react-currency-input-field`\n\n## Usage\n\n```js\nimport CurrencyInput from 'react-currency-input-field';\n\n<CurrencyInput\n  id=\"input-example\"\n  name=\"input-name\"\n  placeholder=\"Please enter a number\"\n  defaultValue={1000}\n  decimalsLimit={2}\n  onValueChange={(value, name) => console.log(value, name)}\n/>;\n```\n\nHave a look in [`src/examples`](https://github.com/cchanxzy/react-currency-input-field/tree/master/src/examples) for more examples on implementing and validation.\n\n## Props\n\n| Name                                               | Type       | Default        | Description                                                                                    |\n| -------------------------------------------------- | ---------- | -------------- | ---------------------------------------------------------------------------------------------- |\n| allowDecimals                                      | `boolean`  | `true`         | Allow decimals                                                                                 |\n| allowNegativeValue                                 | `boolean`  | `true`         | Allow user to enter negative value                                                             |\n| defaultValue                                       | `number`   |                | Default value                                                                                  |\n| value                                              | `number`   |                | Programmatically set the value                                                                 |\n| onValueChange                                      | `function` |                | Handle change in value                                                                         |\n| placeholder                                        | `string`   |                | Placeholder if no value                                                                        |\n| [decimalsLimit](#decimal-scale-and-decimals-limit) | `number`   | `2`            | Limit length of decimals allowed                                                               |\n| [decimalScale](#decimal-scale-and-decimals-limit)  | `number`   |                | Specify decimal scale for padding/trimming eg. 1.5 -> 1.50 or 1.234 -> 1.23 if decimal scale 2 |\n| [fixedDecimalLength](#fixed-decimal-length)        | `number`   |                | Value will always have the specified length of decimals                                        |\n| [prefix](#prefix-and-suffix)                       | `string`   |                | Include a prefix eg. £ or \\$                                                                   |\n| [suffix](#prefix-and-suffix)                       | `string`   |                | Include a suffix eg. € or %                                                                    |\n| [decimalSeparator](#separators)                    | `string`   | locale default | Separator between integer part and fractional part of value                                    |\n| [groupSeparator](#separators)                      | `string`   | locale default | Separator between thousand, million and billion                                                |\n| [intlConfig](#intl-locale-config)                  | `object`   |                | International locale config                                                                    |\n| disabled                                           | `boolean`  | `false`        | Disabled                                                                                       |\n| disableAbbreviations                               | `boolean`  | `false`        | Disable abbreviations eg. 1k -> 1,000, 2m -> 2,000,000                                         |\n| [disableGroupSeparators](#separators)              | `boolean`  | `false`        | Disable auto adding the group separator between values, eg. 1000 -> 1,000                      |\n| maxLength                                          | `number`   |                | Maximum characters the user can enter                                                          |\n| step                                               | `number`   |                | Incremental value change on arrow down and arrow up key press                                  |\n| transformRawValue                                  | `function` |                | Transform the raw value from the input before parsing. Needs to return  `string`.              |\n\n### Abbreviations\n\nIt can parse values with abbreviations `k`, `m` and `b`\n\nExamples:\n\n- 1k = 1,000\n- 2.5m = 2,500,000\n- 3.456B = 3,456,000,000\n\nThis can be turned off by passing in `disableAbbreviations`.\n\n### Prefix and Suffix\n\nYou can add a prefix or suffix by passing in `prefix` or `suffix`.\n\n```js\nimport CurrencyInput from 'react-currency-input-field';\n\n<CurrencyInput prefix=\"£\" value={123} />;\n// £123\n\n<CurrencyInput suffix=\"%\" value={456} />;\n// 456%\n```\n\nNote: Passing in prefix/suffix will override the intl locale config.\n\n### Separators\n\nYou can change the decimal and group separators by passing in `decimalSeparator` and `groupSeparator`.\n\nExample:\n\n```js\nimport CurrencyInput from 'react-currency-input-field';\n\n<CurrencyInput decimalSeparator=\",\" groupSeparator=\".\" />;\n```\n\nNote: the separators cannot be a number, and `decimalSeparator` must be different to `groupSeparator`.\n\nTo turn off auto adding the group separator, add `disableGroupSeparators={true}`.\n\n### Intl Locale Config\n\nThis component can also accept international locale config to format the currency to locale setting.\n\nExamples:\n\n```javascript\nimport CurrencyInput from 'react-currency-input-field';\n\n<CurrencyInput intlConfig={{ locale: 'en-US', currency: 'GBP' }} />;\n\n<CurrencyInput intlConfig={{ locale: 'ja-JP', currency: 'JPY' }} />;\n\n<CurrencyInput intlConfig={{ locale: 'en-IN', currency: 'INR' }} />;\n```\n\n`locale` should be a [BCP 47 language tag](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation), such as \"en-US\" or \"en-IN\".\n\n`currency` should be a [ISO 4217 currency code](https://en.wikipedia.org/wiki/ISO_4217), such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB.\n\nAny prefix, suffix, group separator and decimal separator options passed in will override the default locale settings.\n\n### Decimal Scale and Decimals Limit\n\n`decimalsLimit` and `decimalScale` sound similar but have different usages.\n\n`decimalsLimit` prevents the user from typing more than the limit, and `decimalScale` will format the decimals `onBlur` to the specified length, padding or trimming as necessary.\n\nExample:\n\n```md\nIf decimalScale is 2\n\n- 1.5 becomes 1.50 (padded)\n- 1.234 becomes 1.23 (trimmed)\n\n---\n\nIf decimalLimit is 2\n\n- User enters 1.23\n- User is then prevented from entering another value\n```\n\n### Fixed Decimal Length\n\nUse `fixedDecimalLength` so that the value will always have the specified length of decimals.\n\nThis formatting happens onBlur.\n\nExample if `fixedDecimalLength` was 2:\n\n```md\n- 1 -> 1.00\n- 123 -> 1.23\n- 12.3 -> 12.30\n- 12.34 -> 12.34\n```\n\n## Format values for display\n\nUse the `formatValue` function to format the values to a more user friendly string. This is useful if you are displaying the value somewhere else ie. the total of multiple inputs.\n\n```javascript\nimport { formatValue } from 'react-currency-input-field';\n\n// Format using prefix, groupSeparator and decimalSeparator\nconst formattedValue1 = formatValue({\n  value: '123456',\n  groupSeparator: ',',\n  decimalSeparator: '.',\n  prefix: '$',\n});\n\nconsole.log(formattedValue1);\n// $123,456\n\n// Format using intl locale config\nconst formattedValue2 = formatValue({\n  value: '500000',\n  intlConfig: { locale: 'en-IN', currency: 'INR' },\n});\n\nconsole.log(formattedValue2);\n// ₹5,00,000\n```\n\n## v3.0.0 Release Notes\n\n### Breaking Changes\n\n- :warning: `onChange` renamed to `onValueChange` :warning:\n- `onBlurValue` has been removed.\n- `turnOffAbbreviations` renamed to `disableAbbreviations`.\n- `turnOffSeparators` renamed to `disableGroupSeparators`.\n- `precision` renamed to `decimalScale`\n\n### Improvements in v3\n\n- [Intl locale config](#intl-locale-config) can be passed in. _Please note: formatting where the currency symbol is placed after the value like a suffix eg. (1 234,56 €) might cause problems, this is still in development._\n- Group separator will default to browser locale if not specified.\n- Can pass `ref` to the component.\n- `onChange` and `onBlur` functions can be passed in and will be called with original event.\n\n### Reasoning\n\nAs this component grew in usage, I started getting more bug reports and feature requests. That wasn't a problem though, because I was always happy to fix any bugs and implement any features if I could.\n\nHowever, this meant sometimes I was a bit trigger happy, and didn't always think about how the different options interacted with each other. I found that it was getting a bit convoluted for my liking, and choices I had made earlier in development, now seemed like it could be improved.\n\nTherefore, I took the opportunity of v3 to do a bit of tidying up for the component, in order to make it more future proof and intuitive to use.\n\nI apologize if any of the changes cause new bugs or issues. Please let me know and I will fix asap.\n\n## Issues\n\nFeel free to raise an issue on Github if you find a bug or have a feature request\n",
    "licenseText": "MIT License\n\nCopyright (c) 2020 Chun Chan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-currency-input-field/-/react-currency-input-field-3.6.11.tgz#5e0c94b85c78c51ddfa33e4b60608accfa123366",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-currency-input-field/-/react-currency-input-field-3.6.11.tgz",
    "hash": "5e0c94b85c78c51ddfa33e4b60608accfa123366",
    "integrity": "sha512-M9vOx1eaioSaYWirm7W2WSBi4bpLg+LK4Gf7C1kNhy6MvoSoOzd0mYZPxA78OC9UBIQ2nM080Wu9D1CwTY6n3w==",
    "registry": "npm",
    "packageName": "react-currency-input-field",
    "cacheIntegrity": "sha512-M9vOx1eaioSaYWirm7W2WSBi4bpLg+LK4Gf7C1kNhy6MvoSoOzd0mYZPxA78OC9UBIQ2nM080Wu9D1CwTY6n3w== sha1-XgyUuFx4xR3foz5LYGCKzPoSM2Y="
  },
  "registry": "npm",
  "hash": "5e0c94b85c78c51ddfa33e4b60608accfa123366"
}