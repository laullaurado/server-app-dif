{
  "manifest": {
    "name": "use-memo-one",
    "version": "1.1.3",
    "description": "useMemo and useCallback but with a stable cache",
    "keywords": [
      "memoization",
      "react",
      "useMemo",
      "useCallback",
      "memoize-one"
    ],
    "main": "dist/use-memo-one.cjs.js",
    "module": "dist/use-memo-one.esm.js",
    "sideEffects": false,
    "files": [
      "/dist",
      "/src",
      "index.d.ts"
    ],
    "author": {
      "name": "Alex Reardon",
      "email": "alexreardon@gmail.com"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/alexreardon/use-memo-one.git"
    },
    "peerDependencies": {
      "react": "^16.8.0 || ^17.0.0 || ^18.0.0"
    },
    "devDependencies": {
      "@babel/core": "^7.5.0",
      "@babel/preset-env": "^7.5.2",
      "@babel/preset-flow": "^7.0.0",
      "@babel/preset-react": "^7.0.0",
      "babel-core": "^6.26.3",
      "babel-eslint": "^10.0.2",
      "babel-jest": "^24.8.0",
      "enzyme": "^3.10.0",
      "enzyme-adapter-react-16": "^1.14.0",
      "eslint": "^6.0.1",
      "eslint-config-airbnb": "^17.1.1",
      "eslint-config-prettier": "^6.0.0",
      "eslint-plugin-flowtype": "^3.11.1",
      "eslint-plugin-import": "^2.18.0",
      "eslint-plugin-jest": "^22.7.2",
      "eslint-plugin-jsx-a11y": "^6.2.3",
      "eslint-plugin-prettier": "^3.1.0",
      "eslint-plugin-react": "^7.14.2",
      "eslint-plugin-react-hooks": "^1.6.1",
      "flow-bin": "^0.102.0",
      "jest": "^24.8.0",
      "jest-watch-typeahead": "^0.3.1",
      "prettier": "^1.18.2",
      "react": "^16.8.6",
      "react-dom": "^16.8.6",
      "rimraf": "^2.6.3",
      "rollup": "^1.16.7",
      "rollup-plugin-babel": "^4.3.3",
      "rollup-plugin-commonjs": "^10.0.1",
      "rollup-plugin-replace": "^2.2.0",
      "rollup-plugin-uglify": "^6.0.2"
    },
    "config": {
      "prettier_target": "*.{js,jsx,md,json} src/**/*.{js,jsx,md,json} test/**/*.{js,jsx,md,json}"
    },
    "scripts": {
      "validate": "yarn run lint && yarn run typecheck",
      "test": "jest",
      "typecheck": "flow check",
      "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
      "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
      "lint:eslint": "eslint src test",
      "lint": "yarn lint:eslint && yarn prettier:check",
      "build": "yarn run build:clean && yarn run build:dist && yarn run build:flow",
      "build:clean": "rimraf dist",
      "build:dist": "rollup -c",
      "build:flow": "echo \"// @flow\n\nexport * from '../src';\" > dist/use-memo-one.cjs.js.flow",
      "prepublish": "yarn run build"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-use-memo-one-1.1.3-integrity/node_modules/use-memo-one/package.json",
    "readmeFilename": "README.md",
    "readme": "# useMemoOne\n\n[`useMemo`](https://reactjs.org/docs/hooks-reference.html#usememo) and [`useCallback`](https://reactjs.org/docs/hooks-reference.html#usecallback) with a stable cache (semantic guarantee)\n\n[![Build Status](https://github.com/alexreardon/use-memo-one/actions?query=workflow%3AValidate)](https://github.com/alexreardon/use-memo-one/workflows/Validate/badge.svg)\n[![npm](https://img.shields.io/npm/v/use-memo-one.svg)](https://www.npmjs.com/package/use-memo-one)\n[![dependencies](https://david-dm.org/alexreardon/use-memo-one.svg)](https://david-dm.org/alexreardon/use-memo-one)\n[![min](https://img.shields.io/bundlephobia/min/use-memo-one.svg)](https://bundlephobia.com/result?p=use-memo-one)\n[![minzip](https://img.shields.io/bundlephobia/minzip/use-memo-one.svg)](https://bundlephobia.com/result?p=use-memo-one)\n\n## Background\n\n`useMemo` and `useCallback` cache the most recent result. However, this cache can be destroyed by `React` when it wants to:\n\n> You may rely on useMemo as a performance optimization, **not as a semantic guarantee**. In the future, **React may choose to “forget” some previously memoized values** and recalculate them on next render, e.g. to free memory for offscreen components. Write your code so that it still works without useMemo — and then add it to optimize performance. [- React docs](https://reactjs.org/docs/hooks-reference.html#usememo)\n\n`useMemoOne` and `useCallbackOne` are `concurrent mode` safe alternatives to `useMemo` and `useCallback` **that do provide semantic guarantee**. What this means is that you will always get the same reference for a memoized value so long as there is no input change.\n\nUsing `useMemoOne` and `useCallbackOne` will consume more memory than `useMemo` and `useCallback` in order to provide a stable cache. `React` can release the cache of `useMemo` and `useCallback`, but `useMemoOne` will not release the cache until it is garbage collected.\n\n## Install\n\n```bash\n# npm\nnpm install use-memo-one --save\n# yarn\nyarn add use-memo-one\n```\n\n## Usage\n\n```js\nimport { useMemoOne, useCallbackOne } from 'use-memo-one';\n\nfunction App(props) {\n  const { name, age } = props;\n  const value = useMemoOne(() => ({ hello: name }), [name]);\n  const getAge = useCallbackOne(() => age, [age]);\n\n  // ...\n}\n```\n\n### Aliased imports\n\nYou can use this `import` style drop in replacement for `useMemo` and `useCallback`\n\nThis style also plays very well with [`eslint-plugin-react-hooks`](https://www.npmjs.com/package/eslint-plugin-react-hooks).\n\n```js\nimport { useMemo, useCallback } from 'use-memo-one';\n```\n\n⚠️ The aliased exports `useMemo` and `useCallback` will only work if you use _only_ `use-memo-one` and will clash if you also use `useMemo` or `useCallback` from `react`\n\n```js\nimport { useMemo, useCallback } from 'react';\n// ❌ naming clash\nimport { useMemo, useCallback } from 'use-memo-one';\n```\n\n## API\n\nSee [`useMemo`](https://reactjs.org/docs/hooks-reference.html#usememo) and [`useCallback`](https://reactjs.org/docs/hooks-reference.html#usecallback)\n\n## Linting\n\n`useMemo` and `useCallback` have fantastic linting rules with auto fixing in the [`eslint-plugin-react-hooks`](https://www.npmjs.com/package/eslint-plugin-react-hooks) package. In order to take advantage of these with `useMemoOne` and `useCallbackOne`, structure your import like this:\n\n```js\nimport { useMemo, useCallback } from 'use-memo-one';\n// Or your can alias it yourself\nimport {\n  useMemoOne as useMemo,\n  useCallbackOne as useCallback,\n} from 'use-memo-one';\n\nfunction App() {\n  const [isActive] = useState(false);\n\n  const onClick = useCallback(() => {\n    console.log('isActive', isActive);\n\n    // the input array will now be correctly checked by eslint-plugin-react-hooks\n  }, [isActive]);\n}\n```\n\n## [`eslint`](https://eslint.org/) rules\n\nHere are some `eslint` rules you are welcome to use\n\n```js\nmodule.exports = {\n  rules: {\n    // ...other rules\n\n    'no-restricted-imports': [\n      'error',\n      {\n        // If you want to force an application to always use useMemoOne\n        paths: [\n          {\n            name: 'react',\n            importNames: ['useMemo', 'useCallback'],\n            message:\n              '`useMemo` and `useCallback` are subject to cache busting. Please use `useMemoOne`',\n          },\n          // If you want to force use of the aliased imports from useMemoOne\n          {\n            name: 'use-memo-one',\n            importNames: ['useMemoOne', 'useCallbackOne'],\n            message:\n              'use-memo-one exports `useMemo` and `useCallback` which work nicer with `eslint-plugin-react-hooks`',\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n",
    "licenseText": "MIT License\n\nCopyright (c) 2019 Alexander Reardon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/use-memo-one/-/use-memo-one-1.1.3.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/use-memo-one/-/use-memo-one-1.1.3.tgz",
    "hash": "",
    "integrity": "sha512-g66/K7ZQGYrI6dy8GLpVcMsBp4s17xNkYJVSMvTEevGy3nDxHOfE6z8BVE22+5G5x7t3+bhzrlTDB7ObrEE0cQ==",
    "registry": "npm",
    "packageName": "use-memo-one",
    "cacheIntegrity": "sha512-g66/K7ZQGYrI6dy8GLpVcMsBp4s17xNkYJVSMvTEevGy3nDxHOfE6z8BVE22+5G5x7t3+bhzrlTDB7ObrEE0cQ== sha1-L9LkOiFp6rx0lpYKzox57++XXpk="
  },
  "registry": "npm",
  "hash": "83aebf2bb650198ac8e9dcbc18ba5570cb01a78b35ef136460955232f4c47af1b2de70f11ce7c4eb3f01544db6fb91b9c7bb77f9b873ae54c307b39bac413471"
}