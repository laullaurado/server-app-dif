{
  "manifest": {
    "name": "ms",
    "version": "0.6.2",
    "description": "Tiny ms conversion utility",
    "repository": {
      "type": "git",
      "url": "git://github.com/guille/ms.js.git"
    },
    "main": "./index",
    "devDependencies": {
      "mocha": "*",
      "expect.js": "*",
      "serve": "*"
    },
    "component": {
      "scripts": {
        "ms/index.js": "index.js"
      }
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-ms-0.6.2-integrity/node_modules/ms/package.json",
    "readmeFilename": "README.md",
    "readme": "# ms.js: miliseconds conversion utility\n\n```js\nms('1d')      // 86400000\nms('10h')     // 36000000\nms('2h')      // 7200000\nms('1m')      // 60000\nms('5s')      // 5000\nms('100')     // 100\n```\n\n```js\nms(60000)             // \"1m\"\nms(2 * 60000)         // \"2m\"\nms(ms('10 hours'))    // \"10h\"\n```\n\n```js\nms(60000, { long: true })             // \"1 minute\"\nms(2 * 60000, { long: true })         // \"2 minutes\"\nms(ms('10 hours', { long: true }))    // \"10 hours\"\n```\n\n- Node/Browser compatible. Published as `ms` in NPM.\n- If a number is supplied to `ms`, a string with a unit is returned.\n- If a string that contains the number is supplied, it returns it as\na number (e.g: it returns `100` for `'100'`).\n- If you pass a string with a number and a valid unit, the number of\nequivalent ms is returned.\n\n## License\n\nMIT",
    "license": "MIT*"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/ms/-/ms-0.6.2.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/ms/-/ms-0.6.2.tgz",
    "hash": "",
    "integrity": "sha512-/pc3eh7TWorTtbvXg8je4GvrvEqCfH7PA3P7iW01yL2E53FKixzgMBaQi0NOPbMJqY34cBSvR0tZtmlTkdUG4A==",
    "registry": "npm",
    "packageName": "ms",
    "cacheIntegrity": "sha512-/pc3eh7TWorTtbvXg8je4GvrvEqCfH7PA3P7iW01yL2E53FKixzgMBaQi0NOPbMJqY34cBSvR0tZtmlTkdUG4A== sha1-2JwhJMb9wTU9Zai3e/GqxLGTcIw="
  },
  "registry": "npm",
  "hash": "fe97377a1ed35a8ad3b5bbd783c8dee06bebbc4a827c7ecf0373fb896d35c8bd84e7714a8b1ce03016908b434e3db309a98df87014af474b59b6695391d506e0"
}