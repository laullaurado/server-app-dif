{
  "manifest": {
    "name": "@adminjs/sql",
    "version": "2.2.1",
    "type": "module",
    "exports": {
      ".": {
        "import": "./lib/index.js",
        "types": "./lib/index.d.ts"
      }
    },
    "repository": {
      "type": "git",
      "url": "git@github.com:SoftwareBrothers/adminjs-sql.git"
    },
    "author": {
      "name": "Rafal Dziegielewski",
      "email": "rafal.dzieg@gmail.com"
    },
    "license": "MIT",
    "keywords": [
      "sql",
      "postgres",
      "adminjs",
      "admin panel",
      "database",
      "adapter"
    ],
    "description": "An official AdminJS adapter for SQL databases.",
    "scripts": {
      "clean": "rimraf lib",
      "build": "tsc",
      "lint": "eslint './src/**/*.{ts,js}' --ignore-pattern 'build' --ignore-pattern 'yarn.lock'",
      "release": "semantic-release"
    },
    "devDependencies": {
      "@commitlint/cli": "^17.4.4",
      "@commitlint/config-conventional": "^17.4.4",
      "@semantic-release/git": "^10.0.1",
      "@typescript-eslint/eslint-plugin": "^5.55.0",
      "@typescript-eslint/parser": "^5.55.0",
      "adminjs": "^7.0.0",
      "eslint": "^8.36.0",
      "eslint-config-airbnb": "^19.0.4",
      "eslint-plugin-import": "^2.27.5",
      "eslint-plugin-jsx-a11y": "^6.7.1",
      "eslint-plugin-react": "^7.32.2",
      "eslint-plugin-react-hooks": "^4.6.0",
      "husky": "^4.2.5",
      "rimraf": "^4.4.0",
      "semantic-release": "^20.1.3",
      "semantic-release-slack-bot": "^4.0.0",
      "ts-node": "^10.9.1",
      "typescript": "^4.9.5"
    },
    "dependencies": {
      "knex": "^2.4.2",
      "mysql2": "^3.3.3",
      "pg": "^8.10.0"
    },
    "peerDependencies": {
      "adminjs": "^7.0.0"
    },
    "husky": {
      "hooks": {
        "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
      }
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-@adminjs-sql-2.2.1-bf0ef783d45c0ab19caa7dd85852310c746c90d7-integrity/node_modules/@adminjs/sql/package.json",
    "readmeFilename": "README.md",
    "readme": "# @adminjs/sql\n\nThis is an official AdminJS adapter for SQL databases. It does not require you to use any ORMs, instead you just provide database connection and you model the data sources using AdminJS configuration.\n\nSupported databases:\n- PostgreSQL\n- more coming soon\n\nThis adapter is heavily inspired by [wirekang's adminjs-sql](https://github.com/wirekang/adminjs-sql) which is an unofficial adapter for a MySQL database.\n\n# Installation\n\n```bash\n$ yarn add @adminjs/sql\n```\n\n# Usage with Express\n\nThe example below shows usage with `@adminjs/express`. The usage of `Adapter` class is required to parse your database's schema.\n\n```typescript\nimport AdminJS from 'adminjs'\nimport express from 'express'\nimport Plugin from '@adminjs/express'\nimport Adapter, { Database, Resource } from '@adminjs/sql'\n\nAdminJS.registerAdapter({\n  Database,\n  Resource,\n})\n\nconst start = async () => {\n  const app = express()\n\n  const db = await new Adapter('postgresql', {\n    connectionString: '<your database connection string>', //  postgresql://[user]:[password]@[netloc]:[port]/[dbname]\n    database: '<your database name>',\n  }).init();\n\n  const admin = new AdminJS({\n    resources: [\n      {\n        resource: db.table('users'),\n        options: { /* any resource options, rbac, etc */ },\n      },\n    ],\n    // databases: [db] <- you can also provide the DB connection to register all tables at once\n  });\n\n  admin.watch()\n\n  const router = Plugin.buildRouter(admin)\n\n  app.use(admin.options.rootPath, router)\n\n  app.listen(8080, () => {\n    console.log('app started')\n  })\n}\n\nstart()\n```\n\n# Database Relations\n\nCurrently only `many-to-one` relation works out of the box if you specify foreign key constraints in your database. Other relations will require you to make UI/backend customizations. Please see our [documentation](https://docs.adminjs.co) to learn more.\n\n# Enums\n\nAs of version `1.0.0` database enums aren't automatically detected and loaded. You can assign them manually in your resource options:\n\n```typescript\n// ...\n  const admin = new AdminJS({\n    resources: [{\n      resource: db.table('users'),\n      options: {\n        properties: {\n          role: {\n            availableValues: [\n              { label: 'Admin', value: 'ADMIN' },\n              { label: 'Client', value: 'CLIENT' },\n            ],\n          },\n        },\n      },\n    }],\n  })\n// ...\n```\n\n# Timestamps\n\nIf your database tables have automatically default-set timestamps (`created_at`, `updated_at`, etc) they will be visible in create/edit forms by default. You can hide them in resource options:\n\n```typescript\n// ...\n  const admin = new AdminJS({\n    resources: [{\n      resource: db.table('users'),\n      options: {\n        properties: {\n          created_at: { isVisible: false },\n        },\n      },\n    }],\n  })\n// ...\n```\n\n## License\n\nAdminJS is copyrighted © 2023 rst.software. It is a free software, and may be redistributed under the terms specified in the [LICENSE](LICENSE.md) file.\n\n## About rst.software\n\n<img src=\"https://pbs.twimg.com/profile_images/1367119173604810752/dKVlj1YY_400x400.jpg\" width=150>\n\nWe’re an open, friendly team that helps clients from all over the world to transform their businesses and create astonishing products.\n\n* We are available for [hire](https://www.rst.software/estimate-your-project).\n* If you want to work for us - check out the [career page](https://www.rst.software/join-us).\n",
    "licenseText": "MIT License\n\nCopyright (c) 2023 AdminJS\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@adminjs/sql/-/sql-2.2.1.tgz#bf0ef783d45c0ab19caa7dd85852310c746c90d7",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@adminjs/sql/-/sql-2.2.1.tgz",
    "hash": "bf0ef783d45c0ab19caa7dd85852310c746c90d7",
    "integrity": "sha512-t8GSzcuEgGmlZT4J4LZlmBjBNsu+yCOXW2e9AD9zRJIo6ZbUZBWjQdtN6uwCW2g40ROsx2pkvjUHY9E3SIETlA==",
    "registry": "npm",
    "packageName": "@adminjs/sql",
    "cacheIntegrity": "sha512-t8GSzcuEgGmlZT4J4LZlmBjBNsu+yCOXW2e9AD9zRJIo6ZbUZBWjQdtN6uwCW2g40ROsx2pkvjUHY9E3SIETlA== sha1-vw73g9RcCrGcqn3YWFIxDHRskNc="
  },
  "registry": "npm",
  "hash": "bf0ef783d45c0ab19caa7dd85852310c746c90d7"
}