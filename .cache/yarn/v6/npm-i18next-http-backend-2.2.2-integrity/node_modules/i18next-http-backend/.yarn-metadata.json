{
  "manifest": {
    "name": "i18next-http-backend",
    "version": "2.2.2",
    "private": false,
    "type": "module",
    "main": "./cjs/index.js",
    "exports": {
      "./package.json": "./package.json",
      ".": {
        "types": {
          "require": "./cjs/index.d.ts",
          "import": "./esm/index.d.ts"
        },
        "module": "./esm/index.js",
        "import": "./esm/index.js",
        "require": "./cjs/index.js",
        "default": "./esm/index.js"
      },
      "./cjs": {
        "types": "./cjs/index.d.ts",
        "default": "./cjs/index.js"
      },
      "./esm": {
        "types": "./esm/index.d.ts",
        "default": "./esm/index.js"
      }
    },
    "module": "./esm/index.js",
    "dependencies": {
      "cross-fetch": "3.1.6"
    },
    "types": "./index.d.ts",
    "devDependencies": {
      "@babel/cli": "7.21.5",
      "@babel/core": "7.21.8",
      "@babel/preset-env": "7.21.5",
      "babel-plugin-add-module-exports": "1.0.4",
      "browserify": "17.0.0",
      "dtslint": "4.2.1",
      "eslint": "8.40.0",
      "eslint-config-standard": "17.0.0",
      "eslint-plugin-import": "2.27.5",
      "eslint-plugin-n": "15.6.1",
      "eslint-plugin-promise": "6.1.1",
      "eslint-plugin-require-path-exists": "1.1.9",
      "eslint-plugin-standard": "5.0.0",
      "expect.js": "0.3.1",
      "i18next": "22.4.15",
      "json-server": "0.17.3",
      "json5": "2.2.3",
      "mocha": "10.2.0",
      "tslint": "5.20.1",
      "tsd": "0.28.1",
      "typescript": "5.0.4",
      "uglify-js": "3.17.4",
      "xmlhttprequest": "1.8.0"
    },
    "description": "i18next-http-backend is a backend layer for i18next using in Node.js, in the browser and for Deno.",
    "keywords": [
      "i18next",
      "i18next-backend",
      "i18next-http-backend"
    ],
    "homepage": "https://github.com/i18next/i18next-http-backend",
    "repository": {
      "type": "git",
      "url": "git@github.com:i18next/i18next-http-backend.git"
    },
    "bugs": {
      "url": "https://github.com/i18next/i18next-http-backend/issues"
    },
    "license": "MIT",
    "scripts": {
      "lint": "eslint .",
      "compile:esm": "rm -rf esm && mkdir esm && BABEL_ENV=esm babel lib -d esm && cp index.d.ts esm/index.d.ts && cp lib/getFetch.cjs esm/getFetch.cjs && rm -f esm/getFetch.js && node -e \"fs.writeFileSync('esm/getFetch.cjs', fs.readFileSync('esm/getFetch.cjs').toString().replace('/* eslint-disable no-var, no-undef */\\n', ''))\"",
      "compile:cjs": "rm -rf cjs && mkdir cjs && BABEL_ENV=cjs babel lib -d cjs && cp index.d.ts cjs/index.d.ts && echo '{\"type\":\"commonjs\"}' > cjs/package.json && cp lib/getFetch.cjs cjs/getFetch.js && node -e \"fs.writeFileSync('cjs/getFetch.js', fs.readFileSync('cjs/getFetch.js').toString().replace('/* eslint-disable no-var, no-undef */\\n', ''))\" && node -e \"fs.writeFileSync('cjs/request.js', fs.readFileSync('cjs/request.js').toString().replace('getFetch.cjs', 'getFetch.js'))\"",
      "compile": "npm run compile:esm && npm run compile:cjs",
      "browser": "browserify --ignore cross-fetch --standalone i18nextHttpBackend cjs/index.js -o i18nextHttpBackend.js && uglifyjs i18nextHttpBackend.js --compress --mangle -o i18nextHttpBackend.min.js",
      "build": "npm run compile && npm run browser",
      "test:xmlhttpreq": "mocha test -R spec --require test/fixtures/xmlHttpRequest.cjs --exit --experimental-modules",
      "test:fetch": "mocha test -R spec --exit --experimental-modules",
      "test": "npm run lint && npm run build && npm run test:fetch && npm run test:xmlhttpreq && npm run test:typescript",
      "test:typescript": "tslint --project tsconfig.json && tsd",
      "test:deno": "deno test --allow-net test/deno/*.js",
      "preversion": "npm run test && npm run build && git push",
      "postversion": "git push && git push --tags"
    },
    "tsd": {
      "directory": "test/typescript"
    },
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-i18next-http-backend-2.2.2-integrity/node_modules/i18next-http-backend/package.json",
    "readmeFilename": "README.md",
    "readme": "# Introduction\n\n[![Actions](https://github.com/i18next/i18next-http-backend/workflows/node/badge.svg)](https://github.com/i18next/i18next-http-backend/actions?query=workflow%3Anode)\n[![Actions deno](https://github.com/i18next/i18next-http-backend/workflows/deno/badge.svg)](https://github.com/i18next/i18next-http-backend/actions?query=workflow%3Adeno)\n[![Travis](https://img.shields.io/travis/i18next/i18next-http-backend/master.svg?style=flat-square)](https://travis-ci.org/i18next/i18next-http-backend)\n[![npm version](https://img.shields.io/npm/v/i18next-http-backend.svg?style=flat-square)](https://www.npmjs.com/package/i18next-http-backend)\n\nThis is a simple i18next backend to be used in Node.js, in the browser and for Deno. It will load resources from a backend server using the XMLHttpRequest or the fetch API.\n\nGet a first idea on how it is used in [this i18next crash course video](https://youtu.be/SA_9i4TtxLQ?t=953).\n\nIt's based on the deprecated [i18next-xhr-backend](https://github.com/i18next/i18next-xhr-backend) and can mostly be used as a drop-in replacement.\n\n*[Why i18next-xhr-backend was deprecated?](https://github.com/i18next/i18next-xhr-backend/issues/348#issuecomment-663060275)*\n\n## Advice:\n\nIf you don't like to manage your translation files manually or are simply looking for a [better management solution](https://locize.com), take a look at [i18next-locize-backend](https://github.com/locize/i18next-locize-backend). The i18next [backed plugin](https://www.i18next.com/overview/plugins-and-utils#backends) for üåê [locize](https://locize.com) ‚òÅÔ∏è.\n\n*To see [i18next-locize-backend](https://github.com/locize/i18next-locize-backend) in a working app example, check out:*\n\n- *[this react-tutorial](https://github.com/locize/react-tutorial) starting from [Step 2](https://github.com/locize/react-tutorial#step-2---use-the-locize-cdn)*\n- *[this guide](https://locize.com/blog/react-i18next/) starting from the step of [replacing i18next-http-backend with i18next-locize-backend](https://locize.com/blog/react-i18next/#how-look)*\n- *[this Angular blog post](https://locize.com/blog/angular-i18next/) [introducing i18next-locize-backend](https://locize.com/blog/angular-i18next/#how-look)*\n- *[the code integration part](https://www.youtube.com/watch?v=ds-yEEYP1Ks&t=423s) in this [YouTube video](https://www.youtube.com/watch?v=ds-yEEYP1Ks)*\n\n## Troubleshooting\n\nMake sure you set the `debug` option of i18next to `true`. This will maybe log more information in the developer console.\n\n**Seeing failed http requests, like 404?**\n\nAre you using a [language detector](https://github.com/i18next/i18next-browser-languageDetector) plugin that detects region specific languages you are not providing? i.e. you provide `'en'` translations but you see a `'en-US'` request first?\n\nThis is because of the default `load` [option](https://www.i18next.com/overview/configuration-options) set to `'all'`.\n\nTry to set the `load` [option](https://www.i18next.com/overview/configuration-options) to `'languageOnly'`\n\n```javascript\ni18next.init({\n  load: 'languageOnly',\n  // other options\n})\n```\n\n# Getting started\n\nSource can be loaded via [npm](https://www.npmjs.com/package/i18next-http-backend) or [downloaded](https://github.com/i18next/i18next-http-backend/blob/master/i18nextHttpBackend.min.js) from this repo.\n\nThere's also the possibility to directly import it via a CDN like [jsdelivr](https://cdn.jsdelivr.net/npm/i18next-http-backend@1.3.1/i18nextHttpBackend.min.js) or [unpkg](https://unpkg.com/i18next-http-backend@1.3.1/i18nextHttpBackend.min.js) or similar.\n\n```bash\n# npm package\n$ npm install i18next-http-backend\n```\n\nWiring up:\n\n```js\nimport i18next from 'i18next';\nimport HttpApi from 'i18next-http-backend';\n\ni18next.use(HttpApi).init(i18nextOptions);\n```\n\nfor Deno:\n\n```js\nimport i18next from 'https://deno.land/x/i18next/index.js'\nimport Backend from 'https://deno.land/x/i18next_http_backend/index.js'\n\ni18next.use(Backend).init(i18nextOptions);\n```\n\nfor plain browser:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/i18next-http-backend@1.3.1/i18nextHttpBackend.min.js\"></script>\n<!-- an example can be found in example/jquery/index.html -->\n```\n\n- As with all modules you can either pass the constructor function (class) to the i18next.use or a concrete instance.\n- If you don't use a module loader it will be added to `window.i18nextHttpBackend`\n\n## Backend Options\n\n```js\n{\n  // path where resources get loaded from, or a function\n  // returning a path:\n  // function(lngs, namespaces) { return customPath; }\n  // the returned path will interpolate lng, ns if provided like giving a static path\n  // the function might return a promise\n  // returning falsy will abort the download\n  //\n  // If not used with i18next-multiload-backend-adapter, lngs and namespaces will have only one element each,\n  // If used with i18next-multiload-backend-adapter, lngs and namespaces can have multiple elements\n  //   and also your server needs to support multiloading\n  //      /locales/resources.json?lng=de+en&ns=ns1+ns2\n  //   Adapter is needed to enable MultiLoading https://github.com/i18next/i18next-multiload-backend-adapter\n  //   Returned JSON structure in this case is\n  //   {\n  //    lang : {\n  //     namespaceA: {},\n  //     namespaceB: {},\n  //     ...etc\n  //    }\n  //   }\n  loadPath: '/locales/{{lng}}/{{ns}}.json',\n\n  // path to post missing resources, or a function\n  // function(lng, namespace) { return customPath; }\n  // the returned path will interpolate lng, ns if provided like giving a static path\n  addPath: '/locales/add/{{lng}}/{{ns}}',\n\n  // parse data after it has been fetched\n  // in example use https://www.npmjs.com/package/json5\n  // here it removes the letter a from the json (bad idea)\n  parse: function(data) { return data.replace(/a/g, ''); },\n\n  // parse data before it has been sent by addPath\n  parsePayload: function(namespace, key, fallbackValue) { return { key: fallbackValue || \"\" } },\n\n  // parse data before it has been sent by loadPath\n  // if value returned it will send a POST request\n  parseLoadPayload: function(languages, namespaces) { return undefined },\n\n  // allow cross domain requests\n  crossDomain: false,\n\n  // allow credentials on cross domain requests\n  withCredentials: false,\n\n  // overrideMimeType sets request.overrideMimeType(\"application/json\")\n  overrideMimeType: false,\n\n  // custom request headers sets request.setRequestHeader(key, value)\n  customHeaders: {\n    authorization: 'foo',\n    // ...\n  },\n  // can also be a function, that returns the headers\n  customHeaders: () => ({\n    authorization: 'foo',\n    // ...\n  }),\n\n  requestOptions: { // used for fetch, can also be a function (payload) => ({ method: 'GET' })\n    mode: 'cors',\n    credentials: 'same-origin',\n    cache: 'default'\n  }\n\n  // define a custom request function\n  // can be used to support XDomainRequest in IE 8 and 9\n  //\n  // 'options' will be this entire options object\n  // 'url' will be passed the value of 'loadPath'\n  // 'payload' will be a key:value object used when saving missing translations\n  // 'callback' is a function that takes two parameters, 'err' and 'res'.\n  //            'err' should be an error\n  //            'res' should be an object with a 'status' property and a 'data' property containing a stringified object instance beeing the key:value translation pairs for the\n  //            requested language and namespace, or null in case of an error.\n  request: function (options, url, payload, callback) {},\n\n  // adds parameters to resource URL. 'example.com' -> 'example.com?v=1.3.5'\n  queryStringParams: { v: '1.3.5' },\n\n  reloadInterval: false // can be used to reload resources in a specific interval (milliseconds) (useful in server environments)\n}\n```\n\nOptions can be passed in:\n\n**preferred** - by setting options.backend in i18next.init:\n\n```js\nimport i18next from 'i18next';\nimport HttpApi from 'i18next-http-backend';\n\ni18next.use(HttpApi).init({\n  backend: options,\n});\n```\n\non construction:\n\n```js\nimport HttpApi from 'i18next-http-backend';\nconst HttpApi = new HttpApi(null, options);\n```\n\nvia calling init:\n\n```js\nimport HttpApi from 'i18next-http-backend';\nconst HttpApi = new HttpApi();\nHttpApi.init(null, options);\n```\n\n## TypeScript\n\nTo properly type the backend options, you can import the `HttpBackendOptions` interface and use it as a generic type parameter to the i18next's `init` method, e.g.:\n\n```ts\nimport i18n from 'i18next'\nimport HttpBackend, { HttpBackendOptions } from 'i18next-http-backend'\n\ni18n\n  .use(HttpBackend)\n  .init<HttpBackendOptions>({\n    backend: {\n      // http backend options\n    },\n\n    // other i18next options\n  })\n```\n\n---\n\n<h3 align=\"center\">Gold Sponsors</h3>\n\n<p align=\"center\">\n  <a href=\"https://locize.com/\" target=\"_blank\">\n    <img src=\"https://raw.githubusercontent.com/i18next/i18next/master/assets/locize_sponsor_240.gif\" width=\"240px\">\n  </a>\n</p>\n\n---\n\n**From the creators of i18next: localization as a service - locize.com**\n\nA translation management system built around the i18next ecosystem - [locize.com](https://locize.com).\n\n![locize](https://locize.com/img/ads/github_locize.png)\n\nWith using [locize](http://locize.com/?utm_source=react_i18next_readme&utm_medium=github) you directly support the future of i18next.\n\n---\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/i18next-http-backend/-/i18next-http-backend-2.2.2.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/i18next-http-backend/-/i18next-http-backend-2.2.2.tgz",
    "hash": "",
    "integrity": "sha512-mJu4ZqzDtBiU3O4GV9AbK5ekEqoDMdMnCl3pkdXmb5b8yoIH//u8FsmIe6C5qXb3teZu+j6VMi20tjUgzeABiw==",
    "registry": "npm",
    "packageName": "i18next-http-backend",
    "cacheIntegrity": "sha512-mJu4ZqzDtBiU3O4GV9AbK5ekEqoDMdMnCl3pkdXmb5b8yoIH//u8FsmIe6C5qXb3teZu+j6VMi20tjUgzeABiw== sha1-PuFt/l/jNSTsiSXU8L8VCOu7+t8="
  },
  "registry": "npm",
  "hash": "989bb866acc3b41894dcee0657d01b2b97a412aa0331d3270a5de991d5e66f96fcca8207fffbbc16c9887ba0b9a976f7b5e66efa3e95322db4b63520cde0018b"
}