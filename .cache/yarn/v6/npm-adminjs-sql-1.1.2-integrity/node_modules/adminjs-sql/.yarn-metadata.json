{
  "manifest": {
    "name": "adminjs-sql",
    "version": "1.1.2",
    "description": "Raw SQL adapter for AdminJS without ORM",
    "scripts": {
      "build": "tsc",
      "build:watch": "tsc -w",
      "dev": "nodemon src/index.ts",
      "test": "echo 'no tests yet'",
      "semantic-release": "semantic-release"
    },
    "keywords": [
      "adminjs",
      "adapter",
      "mysql admin",
      "mariadb admin",
      "admin panel"
    ],
    "main": "lib/index.js",
    "types": "lib/index.d.ts",
    "author": {
      "name": "wirekang",
      "email": "wirekang@gmail.com"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/wirekang/adminjs-sql.git"
    },
    "devDependencies": {
      "@types/node": "^18.7.15",
      "nodemon": "^2.0.19",
      "rimraf": "^3.0.2",
      "semantic-release": "^19.0.5"
    },
    "dependencies": {
      "adminjs": "^6.2.0",
      "knex": "^2.3.0"
    },
    "peerDependencies": {},
    "_registry": "npm",
    "_loc": "/home/ubuntu/.cache/yarn/v6/npm-adminjs-sql-1.1.2-integrity/node_modules/adminjs-sql/package.json",
    "readmeFilename": "README.md",
    "readme": "# adminjs-sql [![NPM version](https://img.shields.io/npm/v/adminjs-sql?style=flat-square)](https://npmjs.org/package/adminjs-sql)\n\nThis is an inofficial [AdminJS](https://github.com/SoftwareBrothers/adminjs) adapter which integrates SQL-based database into AdminJS.\n\nInstallation: `yarn add adminjs-sql`\n\n## Usage\n\nThe plugin can be registered using standard `AdminJS.registerAdapter` method.\n\n```typescript\nimport { Adapter } from 'adminjs-sql';\nimport AdminJS from 'adminjs';\n\nAdminJS.registerAdapter(Adapter);\n```\n\nAfter registration, you should call `Adapter.init(client, connectionOptions)` to parse table information from running database.\n\n```typescript\n// import { Adapter } from 'adminjs-sql';\n// ...\nconst db = await Adapter.init('mysql2', {\n  host: DB_HOST,\n  port: DB_PORT,\n  user: DB_USER,\n  password: DB_PASSWORD,\n  database: DB_NAME,\n});\n```\n\nAfter initialization, you can register resources. `db.tables()` to register ALL tables in database. Or you can `db.table(tableName)` to register specific table.\n\n```typescript\nconst adminJs = new AdminJS({\n  databases: [database],\n  resources: db.tables(),\n  // or\n  resources: [db.table('users'), db.table('posts'), db.table('comments')],\n});\n```\n\n## ManyToOne\n\nThis supports ManyToOne relationship if you define a foreign key.\n\n## Example App\n\nYou can run [example app](https://github.com/wirekang/adminjs-sql/tree/main/example) with docker.\n\n1. Clone this repository.\n\n```\ngit clone https://github.com/wirekang/adminjs-sql\nyarn install\nyarn build\n```\n\n2. Setup example project.\n\n```\ncd example/\nyarn install\n```\n\n3. Run mysql:latest in docker container. Checkout [docker-compose.yml](https://github.com/wirekang/adminjs-sql/blob/main/example/docker-compose.yml)\n\n```\nyarn up\n\n```\n\n4. Run example app.\n\n```\nyarn start\n\n\n# Generating samples...\n# Inserting samples...\n# adminjs-sql example app is under http://localhost:33300\n```\n\n5. After enjoying the example, you can clean down MySQL server.\n\n```\nyarn down\n```\n\n## How It Works\n\n`adminjs-sql` collects information about tables and columns from [INFORMATION_SCHEMA](https://dev.mysql.com/doc/refman/8.0/en/information-schema-introduction.html) and converts to `adminjs`. This project uses [Knex Query Builder](https://knexjs.org) to generate SQL string.\n\n## Supported Databases\n\n- MySQL\n- MariaDB\n\n## Todo\n\n- [ ] Support Postgres.\n\n- [ ] Add unit testing.\n\n- [ ] Add more complex example app.\n\nContributions are welcome!!\n",
    "licenseText": "MIT License\n\nCopyright (c) 2022 wirekang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/adminjs-sql/-/adminjs-sql-1.1.2.tgz",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/adminjs-sql/-/adminjs-sql-1.1.2.tgz",
    "hash": "",
    "integrity": "sha512-itZ13bOAi+/jIPNe1UnbOVoVICIUcnhyLZMsfjMYb7NZKBI6VkqZzippuyXoyVI1Ty2FaGcpAwPpfyBiGu71+Q==",
    "registry": "npm",
    "packageName": "adminjs-sql",
    "cacheIntegrity": "sha512-itZ13bOAi+/jIPNe1UnbOVoVICIUcnhyLZMsfjMYb7NZKBI6VkqZzippuyXoyVI1Ty2FaGcpAwPpfyBiGu71+Q== sha1-ASwsX76jwyBlSiuVHNyrZjtg+dk="
  },
  "registry": "npm",
  "hash": "8ad675ddb3808befe320f35ed549db395a152022147278722d932c7e33186fb35928123a564a99ce2a69bb25e8c952354f2d856867290303e97f20621aeef5f9"
}