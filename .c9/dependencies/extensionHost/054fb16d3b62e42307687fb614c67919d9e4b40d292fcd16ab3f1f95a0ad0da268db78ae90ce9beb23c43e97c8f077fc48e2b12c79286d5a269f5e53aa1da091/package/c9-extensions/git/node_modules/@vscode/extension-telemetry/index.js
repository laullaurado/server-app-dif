/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

'use strict';

Object.defineProperty(exports, "__esModule", { value: true });
var os = require("os");

var TelemetryReporter = /** @class */ (function () {
	function TelemetryReporter(extensionId, extensionVersion, key, firstParty) {
		this.extensionId = extensionId;
		this.extensionVersion = extensionVersion;
		this.telemetry = 'off';
	}
	TelemetryReporter.prototype.getCommonProperties = function () {
		var commonProperties = Object.create(null);
		commonProperties['common.os'] = os.platform();
		commonProperties['common.nodeArch'] = os.arch();
		commonProperties['common.platformversion'] = (os.release() || '').replace(/^(\d+)(\.\d+)?(\.\d+)?(.*)/, '$1$2$3');
		commonProperties['common.extname'] = this.extensionId;
		commonProperties['common.extversion'] = this.extensionVersion;
		// if (vscode && vscode.env) {
		// 	commonProperties["common.vscodemachineid"] = vscode.env.machineId;
		// 	commonProperties["common.vscodesessionid"] = vscode.env.sessionId;
		// 	commonProperties["common.vscodeversion"] = vscode.version;
		// 	commonProperties["common.isnewappinstall"] = vscode.env.isNewAppInstall ? vscode.env.isNewAppInstall.toString() : "false";
		// 	commonProperties["common.product"] = vscode.env.appHost;

		// 	switch (vscode.env.uiKind) {
		// 		case vscode.UIKind.Web:
		// 			commonProperties["common.uikind"] = "web";
		// 			break;
		// 		case vscode.UIKind.Desktop:
		// 			commonProperties["common.uikind"] = "desktop";
		// 			break;
		// 		default:
		// 			commonProperties["common.uikind"] = "unknown";
		// 	}

		// 	commonProperties["common.remotename"] = this.cleanRemoteName(vscode.env.remoteName);
		// }
		return commonProperties;
	};
	TelemetryReporter.prototype.sendTelemetryEvent = function () { };
	TelemetryReporter.prototype.sendRawTelemetryEvent = function () { };
	TelemetryReporter.prototype.sendDangerousTelemetryEvent = function () { };
	TelemetryReporter.prototype.sendTelemetryErrorEvent = function () { };
	TelemetryReporter.prototype.sendDangerousTelemetryErrorEvent = function () { };
	TelemetryReporter.prototype.sendTelemetryException = function () { };
	TelemetryReporter.prototype.sendDangerousTelemetryException = function () { };
	TelemetryReporter.prototype.dispose = function () { return new Promise(function () { return undefined; }); };
	return TelemetryReporter;
}());

exports.default = TelemetryReporter;
