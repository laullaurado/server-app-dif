import { buildFeature } from 'adminjs';
import bundleComponent from './bundle-component.js';
const passwordsFeature = (options) => {
    const passwordProperty = options.properties?.password || 'password';
    const encryptedPasswordProperty = options.properties?.encryptedPassword || 'encryptedPassword';
    const { componentLoader, hash } = options;
    if (!hash) {
        throw new Error('You have to pass "hash" option in "PasswordOptions" of "passwordsFeature"');
    }
    const editComponent = bundleComponent(componentLoader, 'PasswordEditComponent');
    const encryptPassword = async (request) => {
        const { method } = request;
        const { [passwordProperty]: newPassword, ...rest } = request.payload || {};
        if (method === 'post' && newPassword) {
            return {
                ...request,
                payload: {
                    ...rest,
                    [encryptedPasswordProperty]: await hash(newPassword),
                },
            };
        }
        return request;
    };
    const movePasswordErrors = async (response) => {
        if (response.record
            && response.record.errors
            && response.record.errors[encryptedPasswordProperty]) {
            response.record.errors[passwordProperty] = response.record.errors[encryptedPasswordProperty];
        }
        return response;
    };
    return buildFeature({
        properties: {
            [passwordProperty]: {
                custom: {
                    password: passwordProperty,
                    encryptedPassword: encryptedPasswordProperty,
                },
                isVisible: { filter: false, show: false, edit: true, list: false },
                components: {
                    edit: editComponent,
                },
            },
        },
        actions: {
            edit: {
                before: [encryptPassword],
                after: [movePasswordErrors],
            },
            new: {
                before: [encryptPassword],
                after: [movePasswordErrors],
            },
        },
    });
};
export default passwordsFeature;
